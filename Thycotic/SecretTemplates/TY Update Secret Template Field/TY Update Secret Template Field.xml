<?xml version="1.0" encoding="utf-16"?>
<ActivityExportMetadata>
  <ActivityMetadata>
    <Name>TY Update Secret Template Field</Name>
    <Label>TY Update Secret Template Field</Label>
    <Color>#EF712F</Color>
    <Description>Update a Secret Template Field</Description>
    <HelpHtml>&lt;p&gt;&lt;br&gt;#     Thycotic&lt;/br&gt;
&lt;br&gt;Update Secret Template Field&lt;/br&gt;
&lt;br&gt;Update a Secret Template Field&lt;/br&gt;
&lt;br&gt;Method: Put&lt;/br&gt;
&lt;br&gt;OperationID: SecretTemplatesService_Put&lt;/br&gt;
&lt;br&gt;EndPoint:&lt;/br&gt;
&lt;br&gt;/secret-templates/{templateId}&lt;/br&gt;
 &lt;/p&gt;</HelpHtml>
  </ActivityMetadata>
  <ActivityGroupMetadata>
    <Label>Thycotic</Label>
    <LabelKey>THYCOTIC</LabelKey>
    <Icon>fa-wrench</Icon>
    <Color>#EF712F</Color>
    <Description>custom</Description>
  </ActivityGroupMetadata>
  <ActivitySourceMetadata>
    <SourceCode>&lt;Activity&gt;
  &lt;Name&gt;TY Update Secret Template Field&lt;/Name&gt;
  &lt;Version&gt;1.0.0.88&lt;/Version&gt;
  &lt;Platform&gt;Windows&lt;/Platform&gt;
  &lt;SourceType&gt;Executor&lt;/SourceType&gt;
  &lt;SourceCodeType&gt;CSHARP&lt;/SourceCodeType&gt;
  &lt;Enc&gt;False&lt;/Enc&gt;
  &lt;Remark /&gt;
  &lt;RequiresMap&gt;False&lt;/RequiresMap&gt;
  &lt;GlobalMemoryRequests /&gt;
  &lt;Assemblies&gt;
    &lt;Assembly type="0"&gt;System.XML.dll&lt;/Assembly&gt;
&lt;Assembly type="0"&gt;System.Data.dll&lt;/Assembly&gt;
&lt;Assembly type="0"&gt;System.dll&lt;/Assembly&gt;
&lt;Assembly type="0"&gt;System.Web.dll&lt;/Assembly&gt;
&lt;Assembly type="0"&gt;System.Net.Http.dll&lt;/Assembly&gt;

  &lt;/Assemblies&gt;
  &lt;SourceCode&gt;dXNpbmcgU3lzdGVtOw0KdXNpbmcgQXllaHUuU2RrLkFjdGl2aXR5Q3JlYXRpb24uSW50ZXJmYWNlczsNCnVzaW5nIEF5ZWh1LlNkay5BY3Rpdml0eUNyZWF0aW9uLkV4dGVuc2lvbjsNCnVzaW5nIEF5ZWh1LlNkay5BY3Rpdml0eUNyZWF0aW9uLkhlbHBlcnM7DQp1c2luZyBTeXN0ZW0uTmV0Ow0KdXNpbmcgU3lzdGVtLk5ldC5IdHRwOw0KdXNpbmcgU3lzdGVtLlRleHQ7DQp1c2luZyBTeXN0ZW0uQ29sbGVjdGlvbnMuR2VuZXJpYzsNCg0KbmFtZXNwYWNlIEF5ZWh1LlRoeWNvdGljDQp7DQogICAgcHVibGljIGNsYXNzIFRZX1VwZGF0ZV9TZWNyZXRfVGVtcGxhdGVfRmllbGQgOiBJQWN0aXZpdHlBc3luYw0KICAgIHsNCg0KDQogICAgDQogICAgcHVibGljIHN0cmluZyBlbmRQb2ludCA9ICJodHRwczovL3tob3N0bmFtZX0iOw0KICAgIA0KICAgIHB1YmxpYyBzdHJpbmcgSnNvbmtleXBhdGggPSAiIjsNCiAgICANCiAgICBwdWJsaWMgc3RyaW5nIHBhc3N3b3JkMSA9ICIiOw0KICAgIA0KICAgIHB1YmxpYyBzdHJpbmcgdGVtcGxhdGVJZCA9ICIiOw0KICAgIA0KICAgIHB1YmxpYyBzdHJpbmcgZGVzY3JpcHRpb25fcCA9ICIiOw0KICAgIA0KICAgIHB1YmxpYyBzdHJpbmcgZGlzcGxheU5hbWVfcCA9ICIiOw0KICAgIA0KICAgIHB1YmxpYyBzdHJpbmcgZWRpdGFibGVQZXJtaXNzaW9uID0gIiI7DQogICAgDQogICAgcHVibGljIHN0cmluZyBlZGl0UmVxdWlyZXMgPSAiIjsNCiAgICANCiAgICBwdWJsaWMgc3RyaW5nIGZpZWxkU2x1Z05hbWUgPSAiIjsNCiAgICANCiAgICBwdWJsaWMgc3RyaW5nIGdlbmVyYXRlUGFzc3dvcmRDaGFyYWN0ZXJTZXQgPSAiIjsNCiAgICANCiAgICBwdWJsaWMgc3RyaW5nIGdlbmVyYXRlUGFzc3dvcmRMZW5ndGggPSAiIjsNCiAgICANCiAgICBwdWJsaWMgc3RyaW5nIGhpZGVPblZpZXcgPSAiIjsNCiAgICANCiAgICBwdWJsaWMgc3RyaW5nIGhpc3RvcnlMZW5ndGggPSAiIjsNCiAgICANCiAgICBwdWJsaWMgc3RyaW5nIGlzRXhwaXJhdGlvbkZpZWxkID0gIiI7DQogICAgDQogICAgcHVibGljIHN0cmluZyBpc0ZpbGUgPSAiIjsNCiAgICANCiAgICBwdWJsaWMgc3RyaW5nIGlzSW5kZXhhYmxlID0gIiI7DQogICAgDQogICAgcHVibGljIHN0cmluZyBpc05vdGVzID0gIiI7DQogICAgDQogICAgcHVibGljIHN0cmluZyBpc1Bhc3N3b3JkID0gIiI7DQogICAgDQogICAgcHVibGljIHN0cmluZyBpc1JlcXVpcmVkID0gIiI7DQogICAgDQogICAgcHVibGljIHN0cmluZyBpc1VybCA9ICIiOw0KICAgIA0KICAgIHB1YmxpYyBzdHJpbmcgbXVzdEVuY3J5cHQgPSAiIjsNCiAgICANCiAgICBwdWJsaWMgc3RyaW5nIG5hbWVfcCA9ICIiOw0KICAgIA0KICAgIHB1YmxpYyBzdHJpbmcgcGFzc3dvcmRSZXF1aXJlbWVudElkID0gIiI7DQogICAgDQogICAgcHVibGljIHN0cmluZyBwYXNzd29yZFR5cGVGaWVsZElkID0gIiI7DQogICAgDQogICAgcHVibGljIHN0cmluZyBzZWNyZXRUZW1wbGF0ZUZpZWxkSWQgPSAiIjsNCiAgICANCiAgICBwdWJsaWMgc3RyaW5nIHNvcnRPcmRlciA9ICIiOw0KICAgIA0KICAgIHByaXZhdGUgYm9vbCBvbWl0SnNvbkVtcHR5b3JOdWxsID0gdHJ1ZTsNCiAgICANCiAgICBwcml2YXRlIHN0cmluZyBjb250ZW50VHlwZSA9ICJhcHBsaWNhdGlvbi9qc29uIjsNCiAgICANCiAgICBwcml2YXRlIHN0cmluZyBodHRwTWV0aG9kID0gIlBVVCI7DQogICAgDQogICAgcHJpdmF0ZSBzdHJpbmcgX3VyaUJ1aWxkZXJQYXRoOw0KICAgIA0KICAgIHByaXZhdGUgc3RyaW5nIF9wb3N0RGF0YTsNCiAgICANCiAgICBwcml2YXRlIFN5c3RlbS5Db2xsZWN0aW9ucy5HZW5lcmljLkRpY3Rpb25hcnk8c3RyaW5nLCBzdHJpbmc+IF9oZWFkZXJzOw0KICAgIA0KICAgIHByaXZhdGUgU3lzdGVtLkNvbGxlY3Rpb25zLkdlbmVyaWMuRGljdGlvbmFyeTxzdHJpbmcsIHN0cmluZz4gX3F1ZXJ5U3RyaW5nQXJyYXk7DQogICAgDQogICAgcHJpdmF0ZSBzdHJpbmcgdXJpQnVpbGRlclBhdGggew0KICAgICAgICBnZXQgew0KICAgICAgICAgICAgaWYgKHN0cmluZy5Jc051bGxPckVtcHR5KF91cmlCdWlsZGVyUGF0aCkpIHsNCl91cmlCdWlsZGVyUGF0aCA9IHN0cmluZy5Gb3JtYXQoIlNlY3JldFNlcnZlci9hcGkvdjEvc2VjcmV0LXRlbXBsYXRlcy97MH0iLHRlbXBsYXRlSWQpOw0KICAgICAgICAgICAgfQ0KcmV0dXJuIF91cmlCdWlsZGVyUGF0aDsNCiAgICAgICAgfQ0KICAgICAgICBzZXQgew0KICAgICAgICAgICAgdGhpcy5fdXJpQnVpbGRlclBhdGggPSB2YWx1ZTsNCiAgICAgICAgfQ0KICAgIH0NCiAgICANCiAgICBwcml2YXRlIHN0cmluZyBwb3N0RGF0YSB7DQogICAgICAgIGdldCB7DQogICAgICAgICAgICBpZiAoc3RyaW5nLklzTnVsbE9yRW1wdHkoX3Bvc3REYXRhKSkgew0KX3Bvc3REYXRhID0gc3RyaW5nLkZvcm1hdCgie3sgXCJkZXNjcmlwdGlvblwiOiBcInswfVwiLCAgXCJkaXNwbGF5TmFtZVwiOiBcInsxfVwiLCAgXCJlZGl0YWJsZVBlcm1pc3Npb25cIjogXCJ7Mn1cIiwgIFwiZWRpdFJlcXVpcmVzXCI6IFwiezN9XCIsICBcImZpZWxkU2x1Z05hbWVcIjogXCJ7NH1cIiwgIFwiZ2VuZXJhdGVQYXNzd29yZENoYXJhY3RlclNldFwiOiBcIns1fVwiLCAgXCJnZW5lcmF0ZVBhc3N3b3JkTGVuZ3RoXCI6IFwiezZ9XCIsICBcImhpZGVPblZpZXdcIjogXCJ7N31cIiwgIFwiaGlzdG9yeUxlbmd0aFwiOiBcIns4fVwiLCAgXCJpc0V4cGlyYXRpb25GaWVsZFwiOiBcIns5fVwiLCAgXCJpc0ZpbGVcIjogXCJ7MTB9XCIsICBcImlzSW5kZXhhYmxlXCI6IFwiezExfVwiLCAgXCJpc05vdGVzXCI6IFwiezEyfVwiLCAgXCJpc1Bhc3N3b3JkXCI6IFwiezEzfVwiLCAgXCJpc1JlcXVpcmVkXCI6IFwiezE0fVwiLCAgXCJpc1VybFwiOiBcInsxNX1cIiwgIFwibXVzdEVuY3J5cHRcIjogXCJ7MTZ9XCIsICBcIm5hbWVcIjogXCJ7MTd9XCIsICBcInBhc3N3b3JkUmVxdWlyZW1lbnRJZFwiOiBcInsxOH1cIiwgIFwicGFzc3dvcmRUeXBlRmllbGRJZFwiOiBcInsxOX1cIiwgIFwic2VjcmV0VGVtcGxhdGVGaWVsZElkXCI6IFwiezIwfVwiLCAgXCJzb3J0T3JkZXJcIjogXCJ7MjF9XCIgfX0iLGRlc2NyaXB0aW9uX3AsZGlzcGxheU5hbWVfcCxlZGl0YWJsZVBlcm1pc3Npb24sZWRpdFJlcXVpcmVzLGZpZWxkU2x1Z05hbWUsZ2VuZXJhdGVQYXNzd29yZENoYXJhY3RlclNldCxnZW5lcmF0ZVBhc3N3b3JkTGVuZ3RoLGhpZGVPblZpZXcsaGlzdG9yeUxlbmd0aCxpc0V4cGlyYXRpb25GaWVsZCxpc0ZpbGUsaXNJbmRleGFibGUsaXNOb3Rlcyxpc1Bhc3N3b3JkLGlzUmVxdWlyZWQsaXNVcmwsbXVzdEVuY3J5cHQsbmFtZV9wLHBhc3N3b3JkUmVxdWlyZW1lbnRJZCxwYXNzd29yZFR5cGVGaWVsZElkLHNlY3JldFRlbXBsYXRlRmllbGRJZCxzb3J0T3JkZXIpOw0KICAgICAgICAgICAgfQ0KcmV0dXJuIF9wb3N0RGF0YTsNCiAgICAgICAgfQ0KICAgICAgICBzZXQgew0KICAgICAgICAgICAgdGhpcy5fcG9zdERhdGEgPSB2YWx1ZTsNCiAgICAgICAgfQ0KICAgIH0NCiAgICANCiAgICBwcml2YXRlIFN5c3RlbS5Db2xsZWN0aW9ucy5HZW5lcmljLkRpY3Rpb25hcnk8c3RyaW5nLCBzdHJpbmc+IGhlYWRlcnMgew0KICAgICAgICBnZXQgew0KICAgICAgICAgICAgaWYgKF9oZWFkZXJzID09IG51bGwpIHsNCl9oZWFkZXJzID0gbmV3IERpY3Rpb25hcnk8c3RyaW5nLCBzdHJpbmc+KCkgeyB7IkF1dGhvcml6YXRpb24iLCJCZWFyZXIgIiArIHBhc3N3b3JkMX0gfTsNCiAgICAgICAgICAgIH0NCnJldHVybiBfaGVhZGVyczsNCiAgICAgICAgfQ0KICAgICAgICBzZXQgew0KICAgICAgICAgICAgdGhpcy5faGVhZGVycyA9IHZhbHVlOw0KICAgICAgICB9DQogICAgfQ0KICAgIA0KICAgIHByaXZhdGUgU3lzdGVtLkNvbGxlY3Rpb25zLkdlbmVyaWMuRGljdGlvbmFyeTxzdHJpbmcsIHN0cmluZz4gcXVlcnlTdHJpbmdBcnJheSB7DQogICAgICAgIGdldCB7DQogICAgICAgICAgICBpZiAoX3F1ZXJ5U3RyaW5nQXJyYXkgPT0gbnVsbCkgew0KX3F1ZXJ5U3RyaW5nQXJyYXkgPSBuZXcgRGljdGlvbmFyeTxzdHJpbmcsIHN0cmluZz4oKSB7ICB9Ow0KICAgICAgICAgICAgfQ0KcmV0dXJuIF9xdWVyeVN0cmluZ0FycmF5Ow0KICAgICAgICB9DQogICAgICAgIHNldCB7DQogICAgICAgICAgICB0aGlzLl9xdWVyeVN0cmluZ0FycmF5ID0gdmFsdWU7DQogICAgICAgIH0NCiAgICB9DQogICAgDQogICAgcHVibGljIFRZX1VwZGF0ZV9TZWNyZXRfVGVtcGxhdGVfRmllbGQoKSB7DQogICAgfQ0KICAgIA0KICAgIHB1YmxpYyBUWV9VcGRhdGVfU2VjcmV0X1RlbXBsYXRlX0ZpZWxkKA0KICAgICAgICAgICAgICAgIHN0cmluZyBlbmRQb2ludCwgDQogICAgICAgICAgICAgICAgc3RyaW5nIEpzb25rZXlwYXRoLCANCiAgICAgICAgICAgICAgICBzdHJpbmcgcGFzc3dvcmQxLCANCiAgICAgICAgICAgICAgICBzdHJpbmcgdGVtcGxhdGVJZCwgDQogICAgICAgICAgICAgICAgc3RyaW5nIGRlc2NyaXB0aW9uX3AsIA0KICAgICAgICAgICAgICAgIHN0cmluZyBkaXNwbGF5TmFtZV9wLCANCiAgICAgICAgICAgICAgICBzdHJpbmcgZWRpdGFibGVQZXJtaXNzaW9uLCANCiAgICAgICAgICAgICAgICBzdHJpbmcgZWRpdFJlcXVpcmVzLCANCiAgICAgICAgICAgICAgICBzdHJpbmcgZmllbGRTbHVnTmFtZSwgDQogICAgICAgICAgICAgICAgc3RyaW5nIGdlbmVyYXRlUGFzc3dvcmRDaGFyYWN0ZXJTZXQsIA0KICAgICAgICAgICAgICAgIHN0cmluZyBnZW5lcmF0ZVBhc3N3b3JkTGVuZ3RoLCANCiAgICAgICAgICAgICAgICBzdHJpbmcgaGlkZU9uVmlldywgDQogICAgICAgICAgICAgICAgc3RyaW5nIGhpc3RvcnlMZW5ndGgsIA0KICAgICAgICAgICAgICAgIHN0cmluZyBpc0V4cGlyYXRpb25GaWVsZCwgDQogICAgICAgICAgICAgICAgc3RyaW5nIGlzRmlsZSwgDQogICAgICAgICAgICAgICAgc3RyaW5nIGlzSW5kZXhhYmxlLCANCiAgICAgICAgICAgICAgICBzdHJpbmcgaXNOb3RlcywgDQogICAgICAgICAgICAgICAgc3RyaW5nIGlzUGFzc3dvcmQsIA0KICAgICAgICAgICAgICAgIHN0cmluZyBpc1JlcXVpcmVkLCANCiAgICAgICAgICAgICAgICBzdHJpbmcgaXNVcmwsIA0KICAgICAgICAgICAgICAgIHN0cmluZyBtdXN0RW5jcnlwdCwgDQogICAgICAgICAgICAgICAgc3RyaW5nIG5hbWVfcCwgDQogICAgICAgICAgICAgICAgc3RyaW5nIHBhc3N3b3JkUmVxdWlyZW1lbnRJZCwgDQogICAgICAgICAgICAgICAgc3RyaW5nIHBhc3N3b3JkVHlwZUZpZWxkSWQsIA0KICAgICAgICAgICAgICAgIHN0cmluZyBzZWNyZXRUZW1wbGF0ZUZpZWxkSWQsIA0KICAgICAgICAgICAgICAgIHN0cmluZyBzb3J0T3JkZXIpIHsNCiAgICAgICAgdGhpcy5lbmRQb2ludCA9IGVuZFBvaW50Ow0KICAgICAgICB0aGlzLkpzb25rZXlwYXRoID0gSnNvbmtleXBhdGg7DQogICAgICAgIHRoaXMucGFzc3dvcmQxID0gcGFzc3dvcmQxOw0KICAgICAgICB0aGlzLnRlbXBsYXRlSWQgPSB0ZW1wbGF0ZUlkOw0KICAgICAgICB0aGlzLmRlc2NyaXB0aW9uX3AgPSBkZXNjcmlwdGlvbl9wOw0KICAgICAgICB0aGlzLmRpc3BsYXlOYW1lX3AgPSBkaXNwbGF5TmFtZV9wOw0KICAgICAgICB0aGlzLmVkaXRhYmxlUGVybWlzc2lvbiA9IGVkaXRhYmxlUGVybWlzc2lvbjsNCiAgICAgICAgdGhpcy5lZGl0UmVxdWlyZXMgPSBlZGl0UmVxdWlyZXM7DQogICAgICAgIHRoaXMuZmllbGRTbHVnTmFtZSA9IGZpZWxkU2x1Z05hbWU7DQogICAgICAgIHRoaXMuZ2VuZXJhdGVQYXNzd29yZENoYXJhY3RlclNldCA9IGdlbmVyYXRlUGFzc3dvcmRDaGFyYWN0ZXJTZXQ7DQogICAgICAgIHRoaXMuZ2VuZXJhdGVQYXNzd29yZExlbmd0aCA9IGdlbmVyYXRlUGFzc3dvcmRMZW5ndGg7DQogICAgICAgIHRoaXMuaGlkZU9uVmlldyA9IGhpZGVPblZpZXc7DQogICAgICAgIHRoaXMuaGlzdG9yeUxlbmd0aCA9IGhpc3RvcnlMZW5ndGg7DQogICAgICAgIHRoaXMuaXNFeHBpcmF0aW9uRmllbGQgPSBpc0V4cGlyYXRpb25GaWVsZDsNCiAgICAgICAgdGhpcy5pc0ZpbGUgPSBpc0ZpbGU7DQogICAgICAgIHRoaXMuaXNJbmRleGFibGUgPSBpc0luZGV4YWJsZTsNCiAgICAgICAgdGhpcy5pc05vdGVzID0gaXNOb3RlczsNCiAgICAgICAgdGhpcy5pc1Bhc3N3b3JkID0gaXNQYXNzd29yZDsNCiAgICAgICAgdGhpcy5pc1JlcXVpcmVkID0gaXNSZXF1aXJlZDsNCiAgICAgICAgdGhpcy5pc1VybCA9IGlzVXJsOw0KICAgICAgICB0aGlzLm11c3RFbmNyeXB0ID0gbXVzdEVuY3J5cHQ7DQogICAgICAgIHRoaXMubmFtZV9wID0gbmFtZV9wOw0KICAgICAgICB0aGlzLnBhc3N3b3JkUmVxdWlyZW1lbnRJZCA9IHBhc3N3b3JkUmVxdWlyZW1lbnRJZDsNCiAgICAgICAgdGhpcy5wYXNzd29yZFR5cGVGaWVsZElkID0gcGFzc3dvcmRUeXBlRmllbGRJZDsNCiAgICAgICAgdGhpcy5zZWNyZXRUZW1wbGF0ZUZpZWxkSWQgPSBzZWNyZXRUZW1wbGF0ZUZpZWxkSWQ7DQogICAgICAgIHRoaXMuc29ydE9yZGVyID0gc29ydE9yZGVyOw0KICAgIH0NCg0KDQogICAgICAgIHB1YmxpYyBhc3luYyBTeXN0ZW0uVGhyZWFkaW5nLlRhc2tzLlRhc2s8SUN1c3RvbUFjdGl2aXR5UmVzdWx0PiBFeGVjdXRlKCkNCiAgICAgICAgew0KDQogICAgICAgICAgICBIdHRwQ2xpZW50IGNsaWVudCA9IG5ldyBIdHRwQ2xpZW50KCk7DQogICAgICAgICAgICBTZXJ2aWNlUG9pbnRNYW5hZ2VyLkV4cGVjdDEwMENvbnRpbnVlID0gdHJ1ZTsNCiAgICAgICAgICAgIFNlcnZpY2VQb2ludE1hbmFnZXIuU2VjdXJpdHlQcm90b2NvbCA9IFNlY3VyaXR5UHJvdG9jb2xUeXBlLlRsczEyOw0KICAgICAgICAgICAgU2VydmljZVBvaW50TWFuYWdlci5TZXJ2ZXJDZXJ0aWZpY2F0ZVZhbGlkYXRpb25DYWxsYmFjayA9IG5ldyBTeXN0ZW0uTmV0LlNlY3VyaXR5LlJlbW90ZUNlcnRpZmljYXRlVmFsaWRhdGlvbkNhbGxiYWNrKEFjY2VwdEFsbENlcnRpZmljYXRpb25zKTsNCiAgICAgICAgICAgIFVyaUJ1aWxkZXIgVXJpQnVpbGRlciA9IG5ldyBVcmlCdWlsZGVyKGVuZFBvaW50KTsgDQogICAgICAgICAgICBVcmlCdWlsZGVyLlBhdGggPSB1cmlCdWlsZGVyUGF0aDsNCiAgICAgICAgICAgIFVyaUJ1aWxkZXIuUXVlcnkgPSBBeWVodUhlbHBlci5xdWVyeVN0cmluZ0J1aWxkZXIocXVlcnlTdHJpbmdBcnJheSk7DQogICAgICAgICAgICBIdHRwUmVxdWVzdE1lc3NhZ2UgbXlIdHRwUmVxdWVzdE1lc3NhZ2UgPSBuZXcgSHR0cFJlcXVlc3RNZXNzYWdlKG5ldyBIdHRwTWV0aG9kKGh0dHBNZXRob2QpLCBVcmlCdWlsZGVyLlRvU3RyaW5nKCkpOw0KICAgICAgICAgICANCiAgICAgICAgICAgIGlmIChjb250ZW50VHlwZSA9PSAiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkIikNCiAgICAgICAgICAgICAgICBteUh0dHBSZXF1ZXN0TWVzc2FnZS5Db250ZW50ID0gQXllaHVIZWxwZXIuZm9ybVVybEVuY29kZWRDb250ZW50KHBvc3REYXRhKTsNCiAgICAgICAgICAgIGVsc2UNCiAgICAgICAgICAgICAgaWYgKHN0cmluZy5Jc051bGxPckVtcHR5KHBvc3REYXRhKSA9PSBmYWxzZSkNCiAgICAgICAgICAgICAgICBpZiAob21pdEpzb25FbXB0eW9yTnVsbCkNCiAgICAgICAgICAgICAgICAgICAgbXlIdHRwUmVxdWVzdE1lc3NhZ2UuQ29udGVudCA9IG5ldyBTdHJpbmdDb250ZW50KEF5ZWh1SGVscGVyLm9taXRKc29uRW1wdHlvck51bGwocG9zdERhdGEpLCBFbmNvZGluZy5VVEY4LCAiYXBwbGljYXRpb24vanNvbiIpOw0KICAgICAgICAgICAgICAgIGVsc2UNCiAgICAgICAgICAgICAgICAgICAgbXlIdHRwUmVxdWVzdE1lc3NhZ2UuQ29udGVudCA9IG5ldyBTdHJpbmdDb250ZW50KHBvc3REYXRhLCBFbmNvZGluZy5VVEY4LCBjb250ZW50VHlwZSk7DQoNCg0KICAgICAgICAgICAgZm9yZWFjaCAoS2V5VmFsdWVQYWlyPHN0cmluZywgc3RyaW5nPiBoZWFkZXJpdGVtIGluIGhlYWRlcnMpDQogICAgICAgICAgICAgICAgY2xpZW50LkRlZmF1bHRSZXF1ZXN0SGVhZGVycy5BZGQoaGVhZGVyaXRlbS5LZXksIGhlYWRlcml0ZW0uVmFsdWUpOw0KDQogICAgICAgICAgICBIdHRwUmVzcG9uc2VNZXNzYWdlIHJlc3BvbnNlID0gY2xpZW50LlNlbmRBc3luYyhteUh0dHBSZXF1ZXN0TWVzc2FnZSkuUmVzdWx0Ow0KDQogICAgICAgICAgICBzd2l0Y2ggKHJlc3BvbnNlLlN0YXR1c0NvZGUpDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgY2FzZSBIdHRwU3RhdHVzQ29kZS5Ob0NvbnRlbnQ6DQogICAgICAgICAgICAgICAgY2FzZSBIdHRwU3RhdHVzQ29kZS5DcmVhdGVkOg0KICAgICAgICAgICAgICAgIGNhc2UgSHR0cFN0YXR1c0NvZGUuQWNjZXB0ZWQ6DQogICAgICAgICAgICAgICAgY2FzZSBIdHRwU3RhdHVzQ29kZS5PSzoNCiAgICAgICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHN0cmluZy5Jc051bGxPckVtcHR5KHJlc3BvbnNlLkNvbnRlbnQuUmVhZEFzU3RyaW5nQXN5bmMoKS5SZXN1bHQpID09IGZhbHNlKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLkdlbmVyYXRlQWN0aXZpdHlSZXN1bHQocmVzcG9uc2UuQ29udGVudC5SZWFkQXNTdHJpbmdBc3luYygpLlJlc3VsdCwgSnNvbmtleXBhdGgpOw0KICAgICAgICAgICAgICAgICAgICAgICAgZWxzZQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLkdlbmVyYXRlQWN0aXZpdHlSZXN1bHQoIlN1Y2Nlc3MiKTsNCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIGRlZmF1bHQ6DQogICAgICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzdHJpbmcuSXNOdWxsT3JFbXB0eShyZXNwb25zZS5Db250ZW50LlJlYWRBc1N0cmluZ0FzeW5jKCkuUmVzdWx0KSA9PSBmYWxzZSkNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXhjZXB0aW9uKHJlc3BvbnNlLkNvbnRlbnQuUmVhZEFzU3RyaW5nQXN5bmMoKS5SZXN1bHQpOw0KICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoc3RyaW5nLklzTnVsbE9yRW1wdHkocmVzcG9uc2UuUmVhc29uUGhyYXNlKSA9PSBmYWxzZSkNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXhjZXB0aW9uKHJlc3BvbnNlLlJlYXNvblBocmFzZSk7DQogICAgICAgICAgICAgICAgICAgICAgICBlbHNlDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEV4Y2VwdGlvbihyZXNwb25zZS5TdGF0dXNDb2RlLlRvU3RyaW5nKCkpOw0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9DQogICAgICAgIH0NCg0KICAgICAgICBwdWJsaWMgYm9vbCBBY2NlcHRBbGxDZXJ0aWZpY2F0aW9ucyhvYmplY3Qgc2VuZGVyLCBTeXN0ZW0uU2VjdXJpdHkuQ3J5cHRvZ3JhcGh5Llg1MDlDZXJ0aWZpY2F0ZXMuWDUwOUNlcnRpZmljYXRlIGNlcnRpZmljYXRpb24sIFN5c3RlbS5TZWN1cml0eS5DcnlwdG9ncmFwaHkuWDUwOUNlcnRpZmljYXRlcy5YNTA5Q2hhaW4gY2hhaW4sIFN5c3RlbS5OZXQuU2VjdXJpdHkuU3NsUG9saWN5RXJyb3JzIHNzbFBvbGljeUVycm9ycykNCiAgICAgICAgew0KICAgICAgICAgICAgcmV0dXJuIHRydWU7DQogICAgICAgIH0NCiAgICB9DQp9&lt;/SourceCode&gt;
&lt;/Activity&gt;</SourceCode>
  </ActivitySourceMetadata>
</ActivityExportMetadata>