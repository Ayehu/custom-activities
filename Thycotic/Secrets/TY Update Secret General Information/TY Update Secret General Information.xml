<?xml version="1.0" encoding="utf-16"?>
<ActivityExportMetadata>
  <ActivityMetadata>
    <Name>TY Update Secret General Information</Name>
    <Label>TY Update Secret General Information</Label>
    <Color>#EF712F</Color>
    <Description>Update Secret General Information</Description>
    <HelpHtml>&lt;p&gt;&lt;br&gt;#     Thycotic&lt;/br&gt;
&lt;br&gt;Update Secret General Information&lt;/br&gt;
&lt;br&gt;Update Secret General Information&lt;/br&gt;
&lt;br&gt;Method: Patch&lt;/br&gt;
&lt;br&gt;OperationID: SecretsService_UpdateGeneral&lt;/br&gt;
&lt;br&gt;EndPoint:&lt;/br&gt;
&lt;br&gt;/secrets/{id}/general&lt;/br&gt;
&lt;br&gt;Usage: secretFields[]&lt;/br&gt;
&lt;br&gt;[{
  &quot;dirty&quot;: &quot;%secretFields_dirty%&quot;,
  &quot;slug&quot;: &quot;%slug%&quot;,
  &quot;value&quot;: &quot;%secretFields_value%&quot;
}]&lt;/br&gt;
 &lt;/p&gt;</HelpHtml>
  </ActivityMetadata>
  <ActivityGroupMetadata>
    <Label>Thycotic</Label>
    <LabelKey>THYCOTIC</LabelKey>
    <Icon>fa-wrench</Icon>
    <Color>#EF712F</Color>
    <Description>custom</Description>
  </ActivityGroupMetadata>
  <ActivitySourceMetadata>
    <SourceCode>&lt;Activity&gt;
  &lt;Name&gt;TY Update Secret General Information&lt;/Name&gt;
  &lt;Version&gt;1.0.0.88&lt;/Version&gt;
  &lt;Platform&gt;Windows&lt;/Platform&gt;
  &lt;SourceType&gt;Executor&lt;/SourceType&gt;
  &lt;SourceCodeType&gt;CSHARP&lt;/SourceCodeType&gt;
  &lt;Enc&gt;False&lt;/Enc&gt;
  &lt;Remark /&gt;
  &lt;RequiresMap&gt;False&lt;/RequiresMap&gt;
  &lt;GlobalMemoryRequests /&gt;
  &lt;Assemblies&gt;
    &lt;Assembly type="0"&gt;System.XML.dll&lt;/Assembly&gt;
&lt;Assembly type="0"&gt;System.Data.dll&lt;/Assembly&gt;
&lt;Assembly type="0"&gt;System.dll&lt;/Assembly&gt;
&lt;Assembly type="0"&gt;System.Web.dll&lt;/Assembly&gt;
&lt;Assembly type="0"&gt;System.Net.Http.dll&lt;/Assembly&gt;

  &lt;/Assemblies&gt;
  &lt;SourceCode&gt;&lt;/SourceCode&gt;
&lt;/Activity&gt;</SourceCode>
  </ActivitySourceMetadata>
</ActivityExportMetadata>