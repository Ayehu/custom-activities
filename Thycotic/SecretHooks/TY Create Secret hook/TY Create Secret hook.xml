<?xml version="1.0" encoding="utf-16"?>
<ActivityExportMetadata>
  <ActivityMetadata>
    <Name>TY Create Secret hook</Name>
    <Label>TY Create Secret hook</Label>
    <Color>#EF712F</Color>
    <Description>Create Secret hook</Description>
    <HelpHtml>&lt;p&gt;&lt;br&gt;#     Thycotic&lt;/br&gt;
&lt;br&gt;Create Secret hook&lt;/br&gt;
&lt;br&gt;Create Secret hook&lt;/br&gt;
&lt;br&gt;Method: Post&lt;/br&gt;
&lt;br&gt;OperationID: SecretHooksService_CreateHook&lt;/br&gt;
&lt;br&gt;EndPoint:&lt;/br&gt;
&lt;br&gt;/secret-detail/{secretId}/hook&lt;/br&gt;
&lt;br&gt;Usage: parameters[]&lt;/br&gt;
&lt;br&gt;[{
  &quot;parameterName&quot;: &quot;%parameterName%&quot;,
  &quot;parameterType&quot;: &quot;%parameterType%&quot;,
  &quot;parameterValue&quot;: &quot;%parameterValue%&quot;
}]&lt;/br&gt;
 &lt;/p&gt;</HelpHtml>
  </ActivityMetadata>
  <ActivityGroupMetadata>
    <Label>Thycotic</Label>
    <LabelKey>THYCOTIC</LabelKey>
    <Icon>fa-wrench</Icon>
    <Color>#EF712F</Color>
    <Description>custom</Description>
  </ActivityGroupMetadata>
  <ActivitySourceMetadata>
    <SourceCode>&lt;Activity&gt;
  &lt;Name&gt;TY Create Secret hook&lt;/Name&gt;
  &lt;Version&gt;1.0.0.88&lt;/Version&gt;
  &lt;Platform&gt;Windows&lt;/Platform&gt;
  &lt;SourceType&gt;Executor&lt;/SourceType&gt;
  &lt;SourceCodeType&gt;CSHARP&lt;/SourceCodeType&gt;
  &lt;Enc&gt;False&lt;/Enc&gt;
  &lt;Remark /&gt;
  &lt;RequiresMap&gt;False&lt;/RequiresMap&gt;
  &lt;GlobalMemoryRequests /&gt;
  &lt;Assemblies&gt;
    &lt;Assembly type="0"&gt;System.XML.dll&lt;/Assembly&gt;
&lt;Assembly type="0"&gt;System.Data.dll&lt;/Assembly&gt;
&lt;Assembly type="0"&gt;System.dll&lt;/Assembly&gt;
&lt;Assembly type="0"&gt;System.Web.dll&lt;/Assembly&gt;
&lt;Assembly type="0"&gt;System.Net.Http.dll&lt;/Assembly&gt;

  &lt;/Assemblies&gt;
  &lt;SourceCode&gt;&lt;/SourceCode&gt;
&lt;/Activity&gt;</SourceCode>
  </ActivitySourceMetadata>
</ActivityExportMetadata>