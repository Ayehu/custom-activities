<?xml version="1.0" encoding="utf-16"?>
<ActivityExportMetadata>
  <ActivityMetadata>
    <Name>AY IncidentConfigurationCreateIncident</Name>
    <Label>AY IncidentConfigurationCreateIncident</Label>
    <Color>#EF712F</Color>
    <Description>AY IncidentConfigurationCreateIncident</Description>
    <HelpHtml>&lt;p&gt;&lt;br&gt;#     Ayehu&lt;/br&gt;
&lt;br&gt;AY IncidentConfigurationCreateIncident&lt;/br&gt;
&lt;br&gt;Method: Post&lt;/br&gt;
&lt;br&gt;OperationID: IncidentConfiguration_CreateIncident&lt;/br&gt;
&lt;br&gt;EndPoint:&lt;/br&gt;
&lt;br&gt;/API/IncidentConfiguration/createIncident&lt;/br&gt;
 &lt;/p&gt;</HelpHtml>
  </ActivityMetadata>
  <ActivityGroupMetadata>
    <Label>Ayehu</Label>
    <LabelKey>AYEHU</LabelKey>
    <Icon>fa-wrench</Icon>
    <Color>#EF712F</Color>
    <Description>custom</Description>
  </ActivityGroupMetadata>
  <ActivitySourceMetadata>
    <SourceCode>&lt;Activity&gt;
  &lt;Name&gt;AY IncidentConfigurationCreateIncident&lt;/Name&gt;
  &lt;Version&gt;1.0.0.88&lt;/Version&gt;
  &lt;Platform&gt;Windows&lt;/Platform&gt;
  &lt;SourceType&gt;Executor&lt;/SourceType&gt;
  &lt;SourceCodeType&gt;CSHARP&lt;/SourceCodeType&gt;
  &lt;Enc&gt;False&lt;/Enc&gt;
  &lt;Remark /&gt;
  &lt;RequiresMap&gt;False&lt;/RequiresMap&gt;
  &lt;GlobalMemoryRequests /&gt;
  &lt;Assemblies&gt;
    &lt;Assembly type="0"&gt;System.XML.dll&lt;/Assembly&gt;
&lt;Assembly type="0"&gt;System.Data.dll&lt;/Assembly&gt;
&lt;Assembly type="0"&gt;System.dll&lt;/Assembly&gt;
&lt;Assembly type="0"&gt;System.Web.dll&lt;/Assembly&gt;
&lt;Assembly type="0"&gt;System.Net.Http.dll&lt;/Assembly&gt;

  &lt;/Assemblies&gt;
  &lt;SourceCode&gt;&lt;/SourceCode&gt;
&lt;/Activity&gt;</SourceCode>
  </ActivitySourceMetadata>
</ActivityExportMetadata>