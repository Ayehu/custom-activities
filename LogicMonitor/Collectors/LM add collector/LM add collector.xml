<?xml version="1.0" encoding="utf-16"?>
<ActivityExportMetadata>
  <ActivityMetadata>
    <Name>LM add collector</Name>
    <Label>LM add collector</Label>
    <Color>#EF712F</Color>
    <Description>LM add collector</Description>
    <HelpHtml>&lt;p&gt;&lt;br&gt;#     LogicMonitor&lt;/br&gt;
&lt;br&gt;add collector&lt;/br&gt;
&lt;br&gt;LM add collector&lt;/br&gt;
&lt;br&gt;Method: Post&lt;/br&gt;
&lt;br&gt;OperationID: addCollector&lt;/br&gt;
&lt;br&gt;EndPoint:&lt;/br&gt;
&lt;br&gt;/setting/collector/collectors&lt;/br&gt;
&lt;br&gt;Usage: customProperties[]&lt;/br&gt;
&lt;br&gt;[{
  &quot;name&quot;: &quot;%name%&quot;,
  &quot;value&quot;: &quot;%value%&quot;
}]&lt;/br&gt;
 &lt;/p&gt;</HelpHtml>
  </ActivityMetadata>
  <ActivityGroupMetadata>
    <Label>LogicMonitor</Label>
    <LabelKey>LOGICMONITOR</LabelKey>
    <Icon>fa-wrench</Icon>
    <Color>#EF712F</Color>
    <Description>custom</Description>
  </ActivityGroupMetadata>
  <ActivitySourceMetadata>
    <SourceCode>&lt;Activity&gt;
  &lt;Name&gt;LM add collector&lt;/Name&gt;
  &lt;Version&gt;1.0.0.88&lt;/Version&gt;
  &lt;Platform&gt;Windows&lt;/Platform&gt;
  &lt;SourceType&gt;Executor&lt;/SourceType&gt;
  &lt;SourceCodeType&gt;CSHARP&lt;/SourceCodeType&gt;
  &lt;Enc&gt;False&lt;/Enc&gt;
  &lt;Remark /&gt;
  &lt;RequiresMap&gt;False&lt;/RequiresMap&gt;
  &lt;GlobalMemoryRequests /&gt;
  &lt;Assemblies&gt;
    &lt;Assembly type="0"&gt;System.XML.dll&lt;/Assembly&gt;
&lt;Assembly type="0"&gt;System.Data.dll&lt;/Assembly&gt;
&lt;Assembly type="0"&gt;System.dll&lt;/Assembly&gt;
&lt;Assembly type="0"&gt;System.Web.dll&lt;/Assembly&gt;
&lt;Assembly type="0"&gt;System.Net.Http.dll&lt;/Assembly&gt;

  &lt;/Assemblies&gt;
  &lt;SourceCode&gt;dXNpbmcgU3lzdGVtOw0KdXNpbmcgQXllaHUuU2RrLkFjdGl2aXR5Q3JlYXRpb24uSW50ZXJmYWNlczsNCnVzaW5nIEF5ZWh1LlNkay5BY3Rpdml0eUNyZWF0aW9uLkV4dGVuc2lvbjsNCnVzaW5nIEF5ZWh1LlNkay5BY3Rpdml0eUNyZWF0aW9uLkhlbHBlcnM7DQp1c2luZyBTeXN0ZW0uTmV0Ow0KdXNpbmcgU3lzdGVtLk5ldC5IdHRwOw0KdXNpbmcgU3lzdGVtLlRleHQ7DQp1c2luZyBTeXN0ZW0uQ29sbGVjdGlvbnMuR2VuZXJpYzsNCg0KbmFtZXNwYWNlIEF5ZWh1LkxvZ2ljTW9uaXRvcg0Kew0KICAgIHB1YmxpYyBjbGFzcyBMTV9hZGRfY29sbGVjdG9yIDogSUFjdGl2aXR5QXN5bmMNCiAgICB7DQoNCg0KICAgIA0KICAgIHB1YmxpYyBzdHJpbmcgZW5kUG9pbnQgPSAiaHR0cHM6Ly97aG9zdG5hbWV9IjsNCiAgICANCiAgICBwdWJsaWMgc3RyaW5nIEpzb25rZXlwYXRoID0gImNvbGxlY3RvcnMiOw0KICAgIA0KICAgIHB1YmxpYyBzdHJpbmcgYWNjZXNzaWQgPSAiIjsNCiAgICANCiAgICBwdWJsaWMgc3RyaW5nIHBhc3N3b3JkMSA9ICIiOw0KICAgIA0KICAgIHB1YmxpYyBzdHJpbmcgZGF5T2ZXZWVrID0gIiI7DQogICAgDQogICAgcHVibGljIHN0cmluZyBkZXNjcmlwdGlvbl9wID0gIiI7DQogICAgDQogICAgcHVibGljIHN0cmluZyBob3VyID0gIiI7DQogICAgDQogICAgcHVibGljIHN0cmluZyBtaW51dGUgPSAiIjsNCiAgICANCiAgICBwdWJsaWMgc3RyaW5nIG9jY3VycmVuY2UgPSAiIjsNCiAgICANCiAgICBwdWJsaWMgc3RyaW5nIHRpbWV6b25lID0gIiI7DQogICAgDQogICAgcHVibGljIHN0cmluZyB2ZXJzaW9uID0gIiI7DQogICAgDQogICAgcHVibGljIHN0cmluZyBiYWNrdXBBZ2VudElkID0gIiI7DQogICAgDQogICAgcHVibGljIHN0cmluZyBjb2xsZWN0b3JHcm91cElkID0gIiI7DQogICAgDQogICAgcHVibGljIHN0cmluZyBjdXN0b21Qcm9wZXJ0aWVzID0gIiI7DQogICAgDQogICAgcHVibGljIHN0cmluZyBfZGVzY3JpcHRpb24gPSAiIjsNCiAgICANCiAgICBwdWJsaWMgc3RyaW5nIGVuYWJsZUZhaWxCYWNrID0gIiI7DQogICAgDQogICAgcHVibGljIHN0cmluZyBlbmFibGVGYWlsT3Zlck9uQ29sbGVjdG9yRGV2aWNlID0gIiI7DQogICAgDQogICAgcHVibGljIHN0cmluZyBlc2NhbGF0aW5nQ2hhaW5JZCA9ICIiOw0KICAgIA0KICAgIHB1YmxpYyBzdHJpbmcgbmVlZEF1dG9DcmVhdGVDb2xsZWN0b3JEZXZpY2UgPSAiIjsNCiAgICANCiAgICBwdWJsaWMgc3RyaW5nIG51bWJlck9mSW5zdGFuY2VzID0gIiI7DQogICAgDQogICAgcHVibGljIHN0cmluZyBvbmV0aW1lRG93bmdyYWRlSW5mb19kZXNjcmlwdGlvbiA9ICIiOw0KICAgIA0KICAgIHB1YmxpYyBzdHJpbmcgbWFqb3JWZXJzaW9uID0gIiI7DQogICAgDQogICAgcHVibGljIHN0cmluZyBtaW5vclZlcnNpb24gPSAiIjsNCiAgICANCiAgICBwdWJsaWMgc3RyaW5nIHN0YXJ0RXBvY2ggPSAiIjsNCiAgICANCiAgICBwdWJsaWMgc3RyaW5nIG9uZXRpbWVEb3duZ3JhZGVJbmZvX3RpbWV6b25lID0gIiI7DQogICAgDQogICAgcHVibGljIHN0cmluZyBvbmV0aW1lVXBncmFkZUluZm9fZGVzY3JpcHRpb24gPSAiIjsNCiAgICANCiAgICBwdWJsaWMgc3RyaW5nIG9uZXRpbWVVcGdyYWRlSW5mb19tYWpvclZlcnNpb24gPSAiIjsNCiAgICANCiAgICBwdWJsaWMgc3RyaW5nIG9uZXRpbWVVcGdyYWRlSW5mb19taW5vclZlcnNpb24gPSAiIjsNCiAgICANCiAgICBwdWJsaWMgc3RyaW5nIG9uZXRpbWVVcGdyYWRlSW5mb19zdGFydEVwb2NoID0gIiI7DQogICAgDQogICAgcHVibGljIHN0cmluZyBvbmV0aW1lVXBncmFkZUluZm9fdGltZXpvbmUgPSAiIjsNCiAgICANCiAgICBwdWJsaWMgc3RyaW5nIHJlc2VuZEl2YWwgPSAiIjsNCiAgICANCiAgICBwdWJsaWMgc3RyaW5nIHNwZWNpZmllZENvbGxlY3RvckRldmljZUdyb3VwSWQgPSAiIjsNCiAgICANCiAgICBwdWJsaWMgc3RyaW5nIHN1cHByZXNzQWxlcnRDbGVhciA9ICIiOw0KICAgIA0KICAgIHByaXZhdGUgYm9vbCBvbWl0SnNvbkVtcHR5b3JOdWxsID0gdHJ1ZTsNCiAgICANCiAgICBwcml2YXRlIHN0cmluZyBjb250ZW50VHlwZSA9ICJhcHBsaWNhdGlvbi9qc29uIjsNCiAgICANCiAgICBwcml2YXRlIHN0cmluZyBodHRwTWV0aG9kID0gIlBPU1QiOw0KICAgIA0KICAgIHByaXZhdGUgc3RyaW5nIF91cmlCdWlsZGVyUGF0aDsNCiAgICANCiAgICBwcml2YXRlIHN0cmluZyBfcG9zdERhdGE7DQogICAgDQogICAgcHJpdmF0ZSBTeXN0ZW0uQ29sbGVjdGlvbnMuR2VuZXJpYy5EaWN0aW9uYXJ5PHN0cmluZywgc3RyaW5nPiBfaGVhZGVyczsNCiAgICANCiAgICBwcml2YXRlIFN5c3RlbS5Db2xsZWN0aW9ucy5HZW5lcmljLkRpY3Rpb25hcnk8c3RyaW5nLCBzdHJpbmc+IF9xdWVyeVN0cmluZ0FycmF5Ow0KICAgIA0KICAgIHByaXZhdGUgc3RyaW5nIHVyaUJ1aWxkZXJQYXRoIHsNCiAgICAgICAgZ2V0IHsNCiAgICAgICAgICAgIGlmIChzdHJpbmcuSXNOdWxsT3JFbXB0eShfdXJpQnVpbGRlclBhdGgpKSB7DQpfdXJpQnVpbGRlclBhdGggPSAiL3NldHRpbmcvY29sbGVjdG9yL2NvbGxlY3RvcnMiOw0KICAgICAgICAgICAgfQ0KcmV0dXJuIF91cmlCdWlsZGVyUGF0aDsNCiAgICAgICAgfQ0KICAgICAgICBzZXQgew0KICAgICAgICAgICAgdGhpcy5fdXJpQnVpbGRlclBhdGggPSB2YWx1ZTsNCiAgICAgICAgfQ0KICAgIH0NCiAgICANCiAgICBwcml2YXRlIHN0cmluZyBwb3N0RGF0YSB7DQogICAgICAgIGdldCB7DQogICAgICAgICAgICBpZiAoc3RyaW5nLklzTnVsbE9yRW1wdHkoX3Bvc3REYXRhKSkgew0KX3Bvc3REYXRhID0gc3RyaW5nLkZvcm1hdCgie3sgXCJhdXRvbWF0aWNVcGdyYWRlSW5mb1wiOiB7eyAgIFwiZGF5T2ZXZWVrXCI6IFwiezB9XCIsICAgIFwiZGVzY3JpcHRpb25cIjogXCJ7MX1cIiwgICAgXCJob3VyXCI6IFwiezJ9XCIsICAgIFwibWludXRlXCI6IFwiezN9XCIsICAgIFwib2NjdXJyZW5jZVwiOiBcIns0fVwiLCAgICBcInRpbWV6b25lXCI6IFwiezV9XCIsICAgIFwidmVyc2lvblwiOiBcIns2fVwiICAgfX0sICBcImJhY2t1cEFnZW50SWRcIjogXCJ7N31cIiwgIFwiY29sbGVjdG9yR3JvdXBJZFwiOiBcIns4fVwiLCAgXCJjdXN0b21Qcm9wZXJ0aWVzXCI6IHs5fSwgIFwiZGVzY3JpcHRpb25cIjogXCJ7MTB9XCIsICBcImVuYWJsZUZhaWxCYWNrXCI6IFwiezExfVwiLCAgXCJlbmFibGVGYWlsT3Zlck9uQ29sbGVjdG9yRGV2aWNlXCI6IFwiezEyfVwiLCAgXCJlc2NhbGF0aW5nQ2hhaW5JZFwiOiBcInsxM31cIiwgIFwibmVlZEF1dG9DcmVhdGVDb2xsZWN0b3JEZXZpY2VcIjogXCJ7MTR9XCIsICBcIm51bWJlck9mSW5zdGFuY2VzXCI6IFwiezE1fVwiLCAgXCJvbmV0aW1lRG93bmdyYWRlSW5mb1wiOiB7eyAgIFwiZGVzY3JpcHRpb25cIjogXCJ7MTZ9XCIsICAgIFwibWFqb3JWZXJzaW9uXCI6IFwiezE3fVwiLCAgICBcIm1pbm9yVmVyc2lvblwiOiBcInsxOH1cIiwgICAgXCJzdGFydEVwb2NoXCI6IFwiezE5fVwiLCAgICBcInRpbWV6b25lXCI6IFwiezIwfVwiICAgfX0sICBcIm9uZXRpbWVVcGdyYWRlSW5mb1wiOiB7eyAgIFwiZGVzY3JpcHRpb25cIjogXCJ7MjF9XCIsICAgIFwibWFqb3JWZXJzaW9uXCI6IFwiezIyfVwiLCAgICBcIm1pbm9yVmVyc2lvblwiOiBcInsyM31cIiwgICAgXCJzdGFydEVwb2NoXCI6IFwiezI0fVwiLCAgICBcInRpbWV6b25lXCI6IFwiezI1fVwiICAgfX0sICBcInJlc2VuZEl2YWxcIjogXCJ7MjZ9XCIsICBcInNwZWNpZmllZENvbGxlY3RvckRldmljZUdyb3VwSWRcIjogXCJ7Mjd9XCIsICBcInN1cHByZXNzQWxlcnRDbGVhclwiOiBcInsyOH1cIiB9fSIsZGF5T2ZXZWVrLGRlc2NyaXB0aW9uX3AsaG91cixtaW51dGUsb2NjdXJyZW5jZSx0aW1lem9uZSx2ZXJzaW9uLGJhY2t1cEFnZW50SWQsY29sbGVjdG9yR3JvdXBJZCxjdXN0b21Qcm9wZXJ0aWVzLF9kZXNjcmlwdGlvbixlbmFibGVGYWlsQmFjayxlbmFibGVGYWlsT3Zlck9uQ29sbGVjdG9yRGV2aWNlLGVzY2FsYXRpbmdDaGFpbklkLG5lZWRBdXRvQ3JlYXRlQ29sbGVjdG9yRGV2aWNlLG51bWJlck9mSW5zdGFuY2VzLG9uZXRpbWVEb3duZ3JhZGVJbmZvX2Rlc2NyaXB0aW9uLG1ham9yVmVyc2lvbixtaW5vclZlcnNpb24sc3RhcnRFcG9jaCxvbmV0aW1lRG93bmdyYWRlSW5mb190aW1lem9uZSxvbmV0aW1lVXBncmFkZUluZm9fZGVzY3JpcHRpb24sb25ldGltZVVwZ3JhZGVJbmZvX21ham9yVmVyc2lvbixvbmV0aW1lVXBncmFkZUluZm9fbWlub3JWZXJzaW9uLG9uZXRpbWVVcGdyYWRlSW5mb19zdGFydEVwb2NoLG9uZXRpbWVVcGdyYWRlSW5mb190aW1lem9uZSxyZXNlbmRJdmFsLHNwZWNpZmllZENvbGxlY3RvckRldmljZUdyb3VwSWQsc3VwcHJlc3NBbGVydENsZWFyKTsNCiAgICAgICAgICAgIH0NCnJldHVybiBfcG9zdERhdGE7DQogICAgICAgIH0NCiAgICAgICAgc2V0IHsNCiAgICAgICAgICAgIHRoaXMuX3Bvc3REYXRhID0gdmFsdWU7DQogICAgICAgIH0NCiAgICB9DQogICAgDQogICAgcHJpdmF0ZSBTeXN0ZW0uQ29sbGVjdGlvbnMuR2VuZXJpYy5EaWN0aW9uYXJ5PHN0cmluZywgc3RyaW5nPiBoZWFkZXJzIHsNCiAgICAgICAgZ2V0IHsNCiAgICAgICAgICAgIGlmIChfaGVhZGVycyA9PSBudWxsKSB7DQpfaGVhZGVycyA9IG5ldyBEaWN0aW9uYXJ5PHN0cmluZywgc3RyaW5nPigpIHsgIH07DQogICAgICAgICAgICB9DQpyZXR1cm4gX2hlYWRlcnM7DQogICAgICAgIH0NCiAgICAgICAgc2V0IHsNCiAgICAgICAgICAgIHRoaXMuX2hlYWRlcnMgPSB2YWx1ZTsNCiAgICAgICAgfQ0KICAgIH0NCiAgICANCiAgICBwcml2YXRlIFN5c3RlbS5Db2xsZWN0aW9ucy5HZW5lcmljLkRpY3Rpb25hcnk8c3RyaW5nLCBzdHJpbmc+IHF1ZXJ5U3RyaW5nQXJyYXkgew0KICAgICAgICBnZXQgew0KICAgICAgICAgICAgaWYgKF9xdWVyeVN0cmluZ0FycmF5ID09IG51bGwpIHsNCl9xdWVyeVN0cmluZ0FycmF5ID0gbmV3IERpY3Rpb25hcnk8c3RyaW5nLCBzdHJpbmc+KCkgeyAgfTsNCiAgICAgICAgICAgIH0NCnJldHVybiBfcXVlcnlTdHJpbmdBcnJheTsNCiAgICAgICAgfQ0KICAgICAgICBzZXQgew0KICAgICAgICAgICAgdGhpcy5fcXVlcnlTdHJpbmdBcnJheSA9IHZhbHVlOw0KICAgICAgICB9DQogICAgfQ0KICAgIA0KICAgIHB1YmxpYyBMTV9hZGRfY29sbGVjdG9yKCkgew0KICAgIH0NCiAgICANCiAgICBwdWJsaWMgTE1fYWRkX2NvbGxlY3RvcigNCiAgICAgICAgICAgICAgICBzdHJpbmcgZW5kUG9pbnQsIA0KICAgICAgICAgICAgICAgIHN0cmluZyBKc29ua2V5cGF0aCwgDQogICAgICAgICAgICAgICAgc3RyaW5nIGFjY2Vzc2lkLCANCiAgICAgICAgICAgICAgICBzdHJpbmcgcGFzc3dvcmQxLCANCiAgICAgICAgICAgICAgICBzdHJpbmcgZGF5T2ZXZWVrLCANCiAgICAgICAgICAgICAgICBzdHJpbmcgZGVzY3JpcHRpb25fcCwgDQogICAgICAgICAgICAgICAgc3RyaW5nIGhvdXIsIA0KICAgICAgICAgICAgICAgIHN0cmluZyBtaW51dGUsIA0KICAgICAgICAgICAgICAgIHN0cmluZyBvY2N1cnJlbmNlLCANCiAgICAgICAgICAgICAgICBzdHJpbmcgdGltZXpvbmUsIA0KICAgICAgICAgICAgICAgIHN0cmluZyB2ZXJzaW9uLCANCiAgICAgICAgICAgICAgICBzdHJpbmcgYmFja3VwQWdlbnRJZCwgDQogICAgICAgICAgICAgICAgc3RyaW5nIGNvbGxlY3Rvckdyb3VwSWQsIA0KICAgICAgICAgICAgICAgIHN0cmluZyBjdXN0b21Qcm9wZXJ0aWVzLCANCiAgICAgICAgICAgICAgICBzdHJpbmcgX2Rlc2NyaXB0aW9uLCANCiAgICAgICAgICAgICAgICBzdHJpbmcgZW5hYmxlRmFpbEJhY2ssIA0KICAgICAgICAgICAgICAgIHN0cmluZyBlbmFibGVGYWlsT3Zlck9uQ29sbGVjdG9yRGV2aWNlLCANCiAgICAgICAgICAgICAgICBzdHJpbmcgZXNjYWxhdGluZ0NoYWluSWQsIA0KICAgICAgICAgICAgICAgIHN0cmluZyBuZWVkQXV0b0NyZWF0ZUNvbGxlY3RvckRldmljZSwgDQogICAgICAgICAgICAgICAgc3RyaW5nIG51bWJlck9mSW5zdGFuY2VzLCANCiAgICAgICAgICAgICAgICBzdHJpbmcgb25ldGltZURvd25ncmFkZUluZm9fZGVzY3JpcHRpb24sIA0KICAgICAgICAgICAgICAgIHN0cmluZyBtYWpvclZlcnNpb24sIA0KICAgICAgICAgICAgICAgIHN0cmluZyBtaW5vclZlcnNpb24sIA0KICAgICAgICAgICAgICAgIHN0cmluZyBzdGFydEVwb2NoLCANCiAgICAgICAgICAgICAgICBzdHJpbmcgb25ldGltZURvd25ncmFkZUluZm9fdGltZXpvbmUsIA0KICAgICAgICAgICAgICAgIHN0cmluZyBvbmV0aW1lVXBncmFkZUluZm9fZGVzY3JpcHRpb24sIA0KICAgICAgICAgICAgICAgIHN0cmluZyBvbmV0aW1lVXBncmFkZUluZm9fbWFqb3JWZXJzaW9uLCANCiAgICAgICAgICAgICAgICBzdHJpbmcgb25ldGltZVVwZ3JhZGVJbmZvX21pbm9yVmVyc2lvbiwgDQogICAgICAgICAgICAgICAgc3RyaW5nIG9uZXRpbWVVcGdyYWRlSW5mb19zdGFydEVwb2NoLCANCiAgICAgICAgICAgICAgICBzdHJpbmcgb25ldGltZVVwZ3JhZGVJbmZvX3RpbWV6b25lLCANCiAgICAgICAgICAgICAgICBzdHJpbmcgcmVzZW5kSXZhbCwgDQogICAgICAgICAgICAgICAgc3RyaW5nIHNwZWNpZmllZENvbGxlY3RvckRldmljZUdyb3VwSWQsIA0KICAgICAgICAgICAgICAgIHN0cmluZyBzdXBwcmVzc0FsZXJ0Q2xlYXIpIHsNCiAgICAgICAgdGhpcy5lbmRQb2ludCA9IGVuZFBvaW50Ow0KICAgICAgICB0aGlzLkpzb25rZXlwYXRoID0gSnNvbmtleXBhdGg7DQogICAgICAgIHRoaXMuYWNjZXNzaWQgPSBhY2Nlc3NpZDsNCiAgICAgICAgdGhpcy5wYXNzd29yZDEgPSBwYXNzd29yZDE7DQogICAgICAgIHRoaXMuZGF5T2ZXZWVrID0gZGF5T2ZXZWVrOw0KICAgICAgICB0aGlzLmRlc2NyaXB0aW9uX3AgPSBkZXNjcmlwdGlvbl9wOw0KICAgICAgICB0aGlzLmhvdXIgPSBob3VyOw0KICAgICAgICB0aGlzLm1pbnV0ZSA9IG1pbnV0ZTsNCiAgICAgICAgdGhpcy5vY2N1cnJlbmNlID0gb2NjdXJyZW5jZTsNCiAgICAgICAgdGhpcy50aW1lem9uZSA9IHRpbWV6b25lOw0KICAgICAgICB0aGlzLnZlcnNpb24gPSB2ZXJzaW9uOw0KICAgICAgICB0aGlzLmJhY2t1cEFnZW50SWQgPSBiYWNrdXBBZ2VudElkOw0KICAgICAgICB0aGlzLmNvbGxlY3Rvckdyb3VwSWQgPSBjb2xsZWN0b3JHcm91cElkOw0KICAgICAgICB0aGlzLmN1c3RvbVByb3BlcnRpZXMgPSBjdXN0b21Qcm9wZXJ0aWVzOw0KICAgICAgICB0aGlzLl9kZXNjcmlwdGlvbiA9IF9kZXNjcmlwdGlvbjsNCiAgICAgICAgdGhpcy5lbmFibGVGYWlsQmFjayA9IGVuYWJsZUZhaWxCYWNrOw0KICAgICAgICB0aGlzLmVuYWJsZUZhaWxPdmVyT25Db2xsZWN0b3JEZXZpY2UgPSBlbmFibGVGYWlsT3Zlck9uQ29sbGVjdG9yRGV2aWNlOw0KICAgICAgICB0aGlzLmVzY2FsYXRpbmdDaGFpbklkID0gZXNjYWxhdGluZ0NoYWluSWQ7DQogICAgICAgIHRoaXMubmVlZEF1dG9DcmVhdGVDb2xsZWN0b3JEZXZpY2UgPSBuZWVkQXV0b0NyZWF0ZUNvbGxlY3RvckRldmljZTsNCiAgICAgICAgdGhpcy5udW1iZXJPZkluc3RhbmNlcyA9IG51bWJlck9mSW5zdGFuY2VzOw0KICAgICAgICB0aGlzLm9uZXRpbWVEb3duZ3JhZGVJbmZvX2Rlc2NyaXB0aW9uID0gb25ldGltZURvd25ncmFkZUluZm9fZGVzY3JpcHRpb247DQogICAgICAgIHRoaXMubWFqb3JWZXJzaW9uID0gbWFqb3JWZXJzaW9uOw0KICAgICAgICB0aGlzLm1pbm9yVmVyc2lvbiA9IG1pbm9yVmVyc2lvbjsNCiAgICAgICAgdGhpcy5zdGFydEVwb2NoID0gc3RhcnRFcG9jaDsNCiAgICAgICAgdGhpcy5vbmV0aW1lRG93bmdyYWRlSW5mb190aW1lem9uZSA9IG9uZXRpbWVEb3duZ3JhZGVJbmZvX3RpbWV6b25lOw0KICAgICAgICB0aGlzLm9uZXRpbWVVcGdyYWRlSW5mb19kZXNjcmlwdGlvbiA9IG9uZXRpbWVVcGdyYWRlSW5mb19kZXNjcmlwdGlvbjsNCiAgICAgICAgdGhpcy5vbmV0aW1lVXBncmFkZUluZm9fbWFqb3JWZXJzaW9uID0gb25ldGltZVVwZ3JhZGVJbmZvX21ham9yVmVyc2lvbjsNCiAgICAgICAgdGhpcy5vbmV0aW1lVXBncmFkZUluZm9fbWlub3JWZXJzaW9uID0gb25ldGltZVVwZ3JhZGVJbmZvX21pbm9yVmVyc2lvbjsNCiAgICAgICAgdGhpcy5vbmV0aW1lVXBncmFkZUluZm9fc3RhcnRFcG9jaCA9IG9uZXRpbWVVcGdyYWRlSW5mb19zdGFydEVwb2NoOw0KICAgICAgICB0aGlzLm9uZXRpbWVVcGdyYWRlSW5mb190aW1lem9uZSA9IG9uZXRpbWVVcGdyYWRlSW5mb190aW1lem9uZTsNCiAgICAgICAgdGhpcy5yZXNlbmRJdmFsID0gcmVzZW5kSXZhbDsNCiAgICAgICAgdGhpcy5zcGVjaWZpZWRDb2xsZWN0b3JEZXZpY2VHcm91cElkID0gc3BlY2lmaWVkQ29sbGVjdG9yRGV2aWNlR3JvdXBJZDsNCiAgICAgICAgdGhpcy5zdXBwcmVzc0FsZXJ0Q2xlYXIgPSBzdXBwcmVzc0FsZXJ0Q2xlYXI7DQogICAgfQ0KDQoNCiAgICAgICAgcHVibGljIGFzeW5jIFN5c3RlbS5UaHJlYWRpbmcuVGFza3MuVGFzazxJQ3VzdG9tQWN0aXZpdHlSZXN1bHQ+IEV4ZWN1dGUoKQ0KICAgICAgICB7DQoNCiAgICAgICAgICAgIEh0dHBDbGllbnQgY2xpZW50ID0gbmV3IEh0dHBDbGllbnQoKTsNCiAgICAgICAgICAgIFNlcnZpY2VQb2ludE1hbmFnZXIuRXhwZWN0MTAwQ29udGludWUgPSB0cnVlOw0KICAgICAgICAgICAgU2VydmljZVBvaW50TWFuYWdlci5TZWN1cml0eVByb3RvY29sID0gU2VjdXJpdHlQcm90b2NvbFR5cGUuVGxzMTI7DQogICAgICAgICAgICBTZXJ2aWNlUG9pbnRNYW5hZ2VyLlNlcnZlckNlcnRpZmljYXRlVmFsaWRhdGlvbkNhbGxiYWNrID0gbmV3IFN5c3RlbS5OZXQuU2VjdXJpdHkuUmVtb3RlQ2VydGlmaWNhdGVWYWxpZGF0aW9uQ2FsbGJhY2soQWNjZXB0QWxsQ2VydGlmaWNhdGlvbnMpOw0KICAgICAgICAgICAgVXJpQnVpbGRlciBVcmlCdWlsZGVyID0gbmV3IFVyaUJ1aWxkZXIoZW5kUG9pbnQpOyANCiAgICAgICAgICAgIFVyaUJ1aWxkZXIuUGF0aCA9ICAiL3NhbnRhYmEvcmVzdCIgKyB1cmlCdWlsZGVyUGF0aDsNCiAgICAgICAgICAgIFVyaUJ1aWxkZXIuUXVlcnkgPSBBeWVodUhlbHBlci5xdWVyeVN0cmluZ0J1aWxkZXIocXVlcnlTdHJpbmdBcnJheSk7DQogICAgICAgICAgICBIdHRwUmVxdWVzdE1lc3NhZ2UgbXlIdHRwUmVxdWVzdE1lc3NhZ2UgPSBuZXcgSHR0cFJlcXVlc3RNZXNzYWdlKG5ldyBIdHRwTWV0aG9kKGh0dHBNZXRob2QpLCBVcmlCdWlsZGVyLlRvU3RyaW5nKCkpOw0KICAgICAgICAgICANCiAgICAgICAgICAgIHN0cmluZyBkYXRhID0gIHBvc3REYXRhOw0KDQogICAgICAgICAgICBpZiAoc3RyaW5nLklzTnVsbE9yRW1wdHkocG9zdERhdGEpID09IGZhbHNlKQ0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgaWYgKG9taXRKc29uRW1wdHlvck51bGwpDQogICAgICAgICAgICAgICAgICBkYXRhID0gQXllaHVIZWxwZXIub21pdEpzb25FbXB0eW9yTnVsbChwb3N0RGF0YSk7DQogICAgICAgICAgICAgICAgICBteUh0dHBSZXF1ZXN0TWVzc2FnZS5Db250ZW50ID0gbmV3IFN0cmluZ0NvbnRlbnQoZGF0YSwgRW5jb2RpbmcuVVRGOCwgY29udGVudFR5cGUpOw0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgDQogICAgICAgICAgICB2YXIgZXBvY2ggPSAobG9uZykoRGF0ZVRpbWUuVXRjTm93IC0gbmV3IERhdGVUaW1lKDE5NzAsIDEsIDEpKS5Ub3RhbE1pbGxpc2Vjb25kczsNCiAgICAgICAgICAgIHZhciBhdXRoSGVhZGVyVmFsdWUgPSBzdHJpbmcuRm9ybWF0KCJMTXYxIHswfTp7MX06ezJ9IiwgYWNjZXNzaWQsIEdlbmVyYXRlU2lnbmF0dXJlKGVwb2NoLCBodHRwTWV0aG9kLCBkYXRhLCB1cmlCdWlsZGVyUGF0aCwgcGFzc3dvcmQxKSwgZXBvY2gpOw0KDQogICAgICAgICAgICBjbGllbnQuRGVmYXVsdFJlcXVlc3RIZWFkZXJzLkFkZCgiQXV0aG9yaXphdGlvbiIsIGF1dGhIZWFkZXJWYWx1ZSk7DQogICAgICAgICAgICBjbGllbnQuRGVmYXVsdFJlcXVlc3RIZWFkZXJzLkFkZCgiWC1WZXJzaW9uIiwgIjIiKTsNCg0KICAgICAgICAgICAgSHR0cFJlc3BvbnNlTWVzc2FnZSByZXNwb25zZSA9IGNsaWVudC5TZW5kQXN5bmMobXlIdHRwUmVxdWVzdE1lc3NhZ2UpLlJlc3VsdDsNCg0KICAgICAgICAgICAgc3dpdGNoIChyZXNwb25zZS5TdGF0dXNDb2RlKQ0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgIGNhc2UgSHR0cFN0YXR1c0NvZGUuTm9Db250ZW50Og0KICAgICAgICAgICAgICAgIGNhc2UgSHR0cFN0YXR1c0NvZGUuQ3JlYXRlZDoNCiAgICAgICAgICAgICAgICBjYXNlIEh0dHBTdGF0dXNDb2RlLkFjY2VwdGVkOg0KICAgICAgICAgICAgICAgIGNhc2UgSHR0cFN0YXR1c0NvZGUuT0s6DQogICAgICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzdHJpbmcuSXNOdWxsT3JFbXB0eShyZXNwb25zZS5Db250ZW50LlJlYWRBc1N0cmluZ0FzeW5jKCkuUmVzdWx0KSA9PSBmYWxzZSkNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5HZW5lcmF0ZUFjdGl2aXR5UmVzdWx0KHJlc3BvbnNlLkNvbnRlbnQuUmVhZEFzU3RyaW5nQXN5bmMoKS5SZXN1bHQsIEpzb25rZXlwYXRoKTsNCiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5HZW5lcmF0ZUFjdGl2aXR5UmVzdWx0KCJTdWNjZXNzIik7DQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICBkZWZhdWx0Og0KICAgICAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgICAgICBpZiAoc3RyaW5nLklzTnVsbE9yRW1wdHkocmVzcG9uc2UuQ29udGVudC5SZWFkQXNTdHJpbmdBc3luYygpLlJlc3VsdCkgPT0gZmFsc2UpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEV4Y2VwdGlvbihyZXNwb25zZS5Db250ZW50LlJlYWRBc1N0cmluZ0FzeW5jKCkuUmVzdWx0KTsNCiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKHN0cmluZy5Jc051bGxPckVtcHR5KHJlc3BvbnNlLlJlYXNvblBocmFzZSkgPT0gZmFsc2UpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEV4Y2VwdGlvbihyZXNwb25zZS5SZWFzb25QaHJhc2UpOw0KICAgICAgICAgICAgICAgICAgICAgICAgZWxzZQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFeGNlcHRpb24ocmVzcG9uc2UuU3RhdHVzQ29kZS5Ub1N0cmluZygpKTsNCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQoNCiAgICAgICAgcHVibGljIGJvb2wgQWNjZXB0QWxsQ2VydGlmaWNhdGlvbnMob2JqZWN0IHNlbmRlciwgU3lzdGVtLlNlY3VyaXR5LkNyeXB0b2dyYXBoeS5YNTA5Q2VydGlmaWNhdGVzLlg1MDlDZXJ0aWZpY2F0ZSBjZXJ0aWZpY2F0aW9uLCBTeXN0ZW0uU2VjdXJpdHkuQ3J5cHRvZ3JhcGh5Llg1MDlDZXJ0aWZpY2F0ZXMuWDUwOUNoYWluIGNoYWluLCBTeXN0ZW0uTmV0LlNlY3VyaXR5LlNzbFBvbGljeUVycm9ycyBzc2xQb2xpY3lFcnJvcnMpDQogICAgICAgIHsNCiAgICAgICAgICAgIHJldHVybiB0cnVlOw0KICAgICAgICB9DQoNCiAgICAgICAgIHByaXZhdGUgc3RhdGljIHN0cmluZyBHZW5lcmF0ZVNpZ25hdHVyZShsb25nIGVwb2NoLCBzdHJpbmcgaHR0cFZlcmIsIHN0cmluZyBkYXRhLCBzdHJpbmcgcmVzb3VyY2VQYXRoLCBzdHJpbmcgYWNjZXNzS2V5KQ0KICAgICAgICB7DQogICAgICAgICAgICB1c2luZyAodmFyIGhtYWMgPSBuZXcgU3lzdGVtLlNlY3VyaXR5LkNyeXB0b2dyYXBoeS5ITUFDU0hBMjU2IHsgS2V5ID0gRW5jb2RpbmcuVVRGOC5HZXRCeXRlcyhhY2Nlc3NLZXkpIH0pDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgdmFyIGNvbXBvdW5kU3RyaW5nID0gaHR0cFZlcmIgKyBlcG9jaCArIGRhdGEgKyByZXNvdXJjZVBhdGg7DQogICAgICAgICAgICAgICAgdmFyIHNpZ25hdHVyZUJ5dGVzID0gaG1hYy5Db21wdXRlSGFzaChFbmNvZGluZy5VVEY4LkdldEJ5dGVzKGNvbXBvdW5kU3RyaW5nKSk7DQogICAgICAgICAgICAgICAgdmFyIHNpZ25hdHVyZUhleCA9IEJpdENvbnZlcnRlci5Ub1N0cmluZyhzaWduYXR1cmVCeXRlcykuUmVwbGFjZSgiLSIsICIiKS5Ub0xvd2VyKCk7DQogICAgICAgICAgICAgICAgcmV0dXJuIENvbnZlcnQuVG9CYXNlNjRTdHJpbmcoRW5jb2RpbmcuVVRGOC5HZXRCeXRlcyhzaWduYXR1cmVIZXgpKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KICAgIH0NCn0=&lt;/SourceCode&gt;
&lt;/Activity&gt;</SourceCode>
  </ActivitySourceMetadata>
</ActivityExportMetadata>