<?xml version="1.0" encoding="utf-16"?>
<ActivityExportMetadata>
  <ActivityMetadata>
    <Name>LM update collector</Name>
    <Label>LM update collector</Label>
    <Color>#EF712F</Color>
    <Description>LM update collector</Description>
    <HelpHtml>&lt;p&gt;&lt;br&gt;#     LogicMonitor&lt;/br&gt;
&lt;br&gt;update collector&lt;/br&gt;
&lt;br&gt;LM update collector&lt;/br&gt;
&lt;br&gt;Method: Patch&lt;/br&gt;
&lt;br&gt;OperationID: patchCollectorById&lt;/br&gt;
&lt;br&gt;EndPoint:&lt;/br&gt;
&lt;br&gt;/setting/collector/collectors/{id}&lt;/br&gt;
&lt;br&gt;Usage: customProperties[]&lt;/br&gt;
&lt;br&gt;[{
  &quot;name&quot;: &quot;%name%&quot;,
  &quot;value&quot;: &quot;%value%&quot;
}]&lt;/br&gt;
 &lt;/p&gt;</HelpHtml>
  </ActivityMetadata>
  <ActivityGroupMetadata>
    <Label>LogicMonitor</Label>
    <LabelKey>LOGICMONITOR</LabelKey>
    <Icon>fa-wrench</Icon>
    <Color>#EF712F</Color>
    <Description>custom</Description>
  </ActivityGroupMetadata>
  <ActivitySourceMetadata>
    <SourceCode>&lt;Activity&gt;
  &lt;Name&gt;LM update collector&lt;/Name&gt;
  &lt;Version&gt;1.0.0.88&lt;/Version&gt;
  &lt;Platform&gt;Windows&lt;/Platform&gt;
  &lt;SourceType&gt;Executor&lt;/SourceType&gt;
  &lt;SourceCodeType&gt;CSHARP&lt;/SourceCodeType&gt;
  &lt;Enc&gt;False&lt;/Enc&gt;
  &lt;Remark /&gt;
  &lt;RequiresMap&gt;False&lt;/RequiresMap&gt;
  &lt;GlobalMemoryRequests /&gt;
  &lt;Assemblies&gt;
    &lt;Assembly type="0"&gt;System.XML.dll&lt;/Assembly&gt;
&lt;Assembly type="0"&gt;System.Data.dll&lt;/Assembly&gt;
&lt;Assembly type="0"&gt;System.dll&lt;/Assembly&gt;
&lt;Assembly type="0"&gt;System.Web.dll&lt;/Assembly&gt;
&lt;Assembly type="0"&gt;System.Net.Http.dll&lt;/Assembly&gt;

  &lt;/Assemblies&gt;
  &lt;SourceCode&gt;dXNpbmcgU3lzdGVtOw0KdXNpbmcgQXllaHUuU2RrLkFjdGl2aXR5Q3JlYXRpb24uSW50ZXJmYWNlczsNCnVzaW5nIEF5ZWh1LlNkay5BY3Rpdml0eUNyZWF0aW9uLkV4dGVuc2lvbjsNCnVzaW5nIEF5ZWh1LlNkay5BY3Rpdml0eUNyZWF0aW9uLkhlbHBlcnM7DQp1c2luZyBTeXN0ZW0uTmV0Ow0KdXNpbmcgU3lzdGVtLk5ldC5IdHRwOw0KdXNpbmcgU3lzdGVtLlRleHQ7DQp1c2luZyBTeXN0ZW0uQ29sbGVjdGlvbnMuR2VuZXJpYzsNCg0KbmFtZXNwYWNlIEF5ZWh1LkxvZ2ljTW9uaXRvcg0Kew0KICAgIHB1YmxpYyBjbGFzcyBMTV91cGRhdGVfY29sbGVjdG9yIDogSUFjdGl2aXR5QXN5bmMNCiAgICB7DQoNCg0KICAgIA0KICAgIHB1YmxpYyBzdHJpbmcgZW5kUG9pbnQgPSAiaHR0cHM6Ly97aG9zdG5hbWV9IjsNCiAgICANCiAgICBwdWJsaWMgc3RyaW5nIEpzb25rZXlwYXRoID0gIiI7DQogICAgDQogICAgcHVibGljIHN0cmluZyBhY2Nlc3NpZCA9ICIiOw0KICAgIA0KICAgIHB1YmxpYyBzdHJpbmcgcGFzc3dvcmQxID0gIiI7DQogICAgDQogICAgcHVibGljIHN0cmluZyBpZF9wID0gIiI7DQogICAgDQogICAgcHVibGljIHN0cmluZyBkYXlPZldlZWsgPSAiIjsNCiAgICANCiAgICBwdWJsaWMgc3RyaW5nIGRlc2NyaXB0aW9uX3AgPSAiIjsNCiAgICANCiAgICBwdWJsaWMgc3RyaW5nIGhvdXIgPSAiIjsNCiAgICANCiAgICBwdWJsaWMgc3RyaW5nIG1pbnV0ZSA9ICIiOw0KICAgIA0KICAgIHB1YmxpYyBzdHJpbmcgb2NjdXJyZW5jZSA9ICIiOw0KICAgIA0KICAgIHB1YmxpYyBzdHJpbmcgdGltZXpvbmUgPSAiIjsNCiAgICANCiAgICBwdWJsaWMgc3RyaW5nIHZlcnNpb24gPSAiIjsNCiAgICANCiAgICBwdWJsaWMgc3RyaW5nIGJhY2t1cEFnZW50SWQgPSAiIjsNCiAgICANCiAgICBwdWJsaWMgc3RyaW5nIGNvbGxlY3Rvckdyb3VwSWQgPSAiIjsNCiAgICANCiAgICBwdWJsaWMgc3RyaW5nIGN1c3RvbVByb3BlcnRpZXMgPSAiIjsNCiAgICANCiAgICBwdWJsaWMgc3RyaW5nIF9kZXNjcmlwdGlvbiA9ICIiOw0KICAgIA0KICAgIHB1YmxpYyBzdHJpbmcgZW5hYmxlRmFpbEJhY2sgPSAiIjsNCiAgICANCiAgICBwdWJsaWMgc3RyaW5nIGVuYWJsZUZhaWxPdmVyT25Db2xsZWN0b3JEZXZpY2UgPSAiIjsNCiAgICANCiAgICBwdWJsaWMgc3RyaW5nIGVzY2FsYXRpbmdDaGFpbklkID0gIiI7DQogICAgDQogICAgcHVibGljIHN0cmluZyBuZWVkQXV0b0NyZWF0ZUNvbGxlY3RvckRldmljZSA9ICIiOw0KICAgIA0KICAgIHB1YmxpYyBzdHJpbmcgbnVtYmVyT2ZJbnN0YW5jZXMgPSAiIjsNCiAgICANCiAgICBwdWJsaWMgc3RyaW5nIG9uZXRpbWVEb3duZ3JhZGVJbmZvX2Rlc2NyaXB0aW9uID0gIiI7DQogICAgDQogICAgcHVibGljIHN0cmluZyBtYWpvclZlcnNpb24gPSAiIjsNCiAgICANCiAgICBwdWJsaWMgc3RyaW5nIG1pbm9yVmVyc2lvbiA9ICIiOw0KICAgIA0KICAgIHB1YmxpYyBzdHJpbmcgc3RhcnRFcG9jaCA9ICIiOw0KICAgIA0KICAgIHB1YmxpYyBzdHJpbmcgb25ldGltZURvd25ncmFkZUluZm9fdGltZXpvbmUgPSAiIjsNCiAgICANCiAgICBwdWJsaWMgc3RyaW5nIG9uZXRpbWVVcGdyYWRlSW5mb19kZXNjcmlwdGlvbiA9ICIiOw0KICAgIA0KICAgIHB1YmxpYyBzdHJpbmcgb25ldGltZVVwZ3JhZGVJbmZvX21ham9yVmVyc2lvbiA9ICIiOw0KICAgIA0KICAgIHB1YmxpYyBzdHJpbmcgb25ldGltZVVwZ3JhZGVJbmZvX21pbm9yVmVyc2lvbiA9ICIiOw0KICAgIA0KICAgIHB1YmxpYyBzdHJpbmcgb25ldGltZVVwZ3JhZGVJbmZvX3N0YXJ0RXBvY2ggPSAiIjsNCiAgICANCiAgICBwdWJsaWMgc3RyaW5nIG9uZXRpbWVVcGdyYWRlSW5mb190aW1lem9uZSA9ICIiOw0KICAgIA0KICAgIHB1YmxpYyBzdHJpbmcgcmVzZW5kSXZhbCA9ICIiOw0KICAgIA0KICAgIHB1YmxpYyBzdHJpbmcgc3BlY2lmaWVkQ29sbGVjdG9yRGV2aWNlR3JvdXBJZCA9ICIiOw0KICAgIA0KICAgIHB1YmxpYyBzdHJpbmcgc3VwcHJlc3NBbGVydENsZWFyID0gIiI7DQogICAgDQogICAgcHJpdmF0ZSBib29sIG9taXRKc29uRW1wdHlvck51bGwgPSB0cnVlOw0KICAgIA0KICAgIHByaXZhdGUgc3RyaW5nIGNvbnRlbnRUeXBlID0gImFwcGxpY2F0aW9uL2pzb24iOw0KICAgIA0KICAgIHByaXZhdGUgc3RyaW5nIGh0dHBNZXRob2QgPSAiUEFUQ0giOw0KICAgIA0KICAgIHByaXZhdGUgc3RyaW5nIF91cmlCdWlsZGVyUGF0aDsNCiAgICANCiAgICBwcml2YXRlIHN0cmluZyBfcG9zdERhdGE7DQogICAgDQogICAgcHJpdmF0ZSBTeXN0ZW0uQ29sbGVjdGlvbnMuR2VuZXJpYy5EaWN0aW9uYXJ5PHN0cmluZywgc3RyaW5nPiBfaGVhZGVyczsNCiAgICANCiAgICBwcml2YXRlIFN5c3RlbS5Db2xsZWN0aW9ucy5HZW5lcmljLkRpY3Rpb25hcnk8c3RyaW5nLCBzdHJpbmc+IF9xdWVyeVN0cmluZ0FycmF5Ow0KICAgIA0KICAgIHByaXZhdGUgc3RyaW5nIHVyaUJ1aWxkZXJQYXRoIHsNCiAgICAgICAgZ2V0IHsNCiAgICAgICAgICAgIGlmIChzdHJpbmcuSXNOdWxsT3JFbXB0eShfdXJpQnVpbGRlclBhdGgpKSB7DQpfdXJpQnVpbGRlclBhdGggPSBzdHJpbmcuRm9ybWF0KCIvc2V0dGluZy9jb2xsZWN0b3IvY29sbGVjdG9ycy97MH0iLGlkX3ApOw0KICAgICAgICAgICAgfQ0KcmV0dXJuIF91cmlCdWlsZGVyUGF0aDsNCiAgICAgICAgfQ0KICAgICAgICBzZXQgew0KICAgICAgICAgICAgdGhpcy5fdXJpQnVpbGRlclBhdGggPSB2YWx1ZTsNCiAgICAgICAgfQ0KICAgIH0NCiAgICANCiAgICBwcml2YXRlIHN0cmluZyBwb3N0RGF0YSB7DQogICAgICAgIGdldCB7DQogICAgICAgICAgICBpZiAoc3RyaW5nLklzTnVsbE9yRW1wdHkoX3Bvc3REYXRhKSkgew0KX3Bvc3REYXRhID0gc3RyaW5nLkZvcm1hdCgie3sgXCJhdXRvbWF0aWNVcGdyYWRlSW5mb1wiOiB7eyAgIFwiZGF5T2ZXZWVrXCI6IFwiezB9XCIsICAgIFwiZGVzY3JpcHRpb25cIjogXCJ7MX1cIiwgICAgXCJob3VyXCI6IFwiezJ9XCIsICAgIFwibWludXRlXCI6IFwiezN9XCIsICAgIFwib2NjdXJyZW5jZVwiOiBcIns0fVwiLCAgICBcInRpbWV6b25lXCI6IFwiezV9XCIsICAgIFwidmVyc2lvblwiOiBcIns2fVwiICAgfX0sICBcImJhY2t1cEFnZW50SWRcIjogXCJ7N31cIiwgIFwiY29sbGVjdG9yR3JvdXBJZFwiOiBcIns4fVwiLCAgXCJjdXN0b21Qcm9wZXJ0aWVzXCI6IHs5fSwgIFwiZGVzY3JpcHRpb25cIjogXCJ7MTB9XCIsICBcImVuYWJsZUZhaWxCYWNrXCI6IFwiezExfVwiLCAgXCJlbmFibGVGYWlsT3Zlck9uQ29sbGVjdG9yRGV2aWNlXCI6IFwiezEyfVwiLCAgXCJlc2NhbGF0aW5nQ2hhaW5JZFwiOiBcInsxM31cIiwgIFwibmVlZEF1dG9DcmVhdGVDb2xsZWN0b3JEZXZpY2VcIjogXCJ7MTR9XCIsICBcIm51bWJlck9mSW5zdGFuY2VzXCI6IFwiezE1fVwiLCAgXCJvbmV0aW1lRG93bmdyYWRlSW5mb1wiOiB7eyAgIFwiZGVzY3JpcHRpb25cIjogXCJ7MTZ9XCIsICAgIFwibWFqb3JWZXJzaW9uXCI6IFwiezE3fVwiLCAgICBcIm1pbm9yVmVyc2lvblwiOiBcInsxOH1cIiwgICAgXCJzdGFydEVwb2NoXCI6IFwiezE5fVwiLCAgICBcInRpbWV6b25lXCI6IFwiezIwfVwiICAgfX0sICBcIm9uZXRpbWVVcGdyYWRlSW5mb1wiOiB7eyAgIFwiZGVzY3JpcHRpb25cIjogXCJ7MjF9XCIsICAgIFwibWFqb3JWZXJzaW9uXCI6IFwiezIyfVwiLCAgICBcIm1pbm9yVmVyc2lvblwiOiBcInsyM31cIiwgICAgXCJzdGFydEVwb2NoXCI6IFwiezI0fVwiLCAgICBcInRpbWV6b25lXCI6IFwiezI1fVwiICAgfX0sICBcInJlc2VuZEl2YWxcIjogXCJ7MjZ9XCIsICBcInNwZWNpZmllZENvbGxlY3RvckRldmljZUdyb3VwSWRcIjogXCJ7Mjd9XCIsICBcInN1cHByZXNzQWxlcnRDbGVhclwiOiBcInsyOH1cIiB9fSIsZGF5T2ZXZWVrLGRlc2NyaXB0aW9uX3AsaG91cixtaW51dGUsb2NjdXJyZW5jZSx0aW1lem9uZSx2ZXJzaW9uLGJhY2t1cEFnZW50SWQsY29sbGVjdG9yR3JvdXBJZCxjdXN0b21Qcm9wZXJ0aWVzLF9kZXNjcmlwdGlvbixlbmFibGVGYWlsQmFjayxlbmFibGVGYWlsT3Zlck9uQ29sbGVjdG9yRGV2aWNlLGVzY2FsYXRpbmdDaGFpbklkLG5lZWRBdXRvQ3JlYXRlQ29sbGVjdG9yRGV2aWNlLG51bWJlck9mSW5zdGFuY2VzLG9uZXRpbWVEb3duZ3JhZGVJbmZvX2Rlc2NyaXB0aW9uLG1ham9yVmVyc2lvbixtaW5vclZlcnNpb24sc3RhcnRFcG9jaCxvbmV0aW1lRG93bmdyYWRlSW5mb190aW1lem9uZSxvbmV0aW1lVXBncmFkZUluZm9fZGVzY3JpcHRpb24sb25ldGltZVVwZ3JhZGVJbmZvX21ham9yVmVyc2lvbixvbmV0aW1lVXBncmFkZUluZm9fbWlub3JWZXJzaW9uLG9uZXRpbWVVcGdyYWRlSW5mb19zdGFydEVwb2NoLG9uZXRpbWVVcGdyYWRlSW5mb190aW1lem9uZSxyZXNlbmRJdmFsLHNwZWNpZmllZENvbGxlY3RvckRldmljZUdyb3VwSWQsc3VwcHJlc3NBbGVydENsZWFyKTsNCiAgICAgICAgICAgIH0NCnJldHVybiBfcG9zdERhdGE7DQogICAgICAgIH0NCiAgICAgICAgc2V0IHsNCiAgICAgICAgICAgIHRoaXMuX3Bvc3REYXRhID0gdmFsdWU7DQogICAgICAgIH0NCiAgICB9DQogICAgDQogICAgcHJpdmF0ZSBTeXN0ZW0uQ29sbGVjdGlvbnMuR2VuZXJpYy5EaWN0aW9uYXJ5PHN0cmluZywgc3RyaW5nPiBoZWFkZXJzIHsNCiAgICAgICAgZ2V0IHsNCiAgICAgICAgICAgIGlmIChfaGVhZGVycyA9PSBudWxsKSB7DQpfaGVhZGVycyA9IG5ldyBEaWN0aW9uYXJ5PHN0cmluZywgc3RyaW5nPigpIHsgIH07DQogICAgICAgICAgICB9DQpyZXR1cm4gX2hlYWRlcnM7DQogICAgICAgIH0NCiAgICAgICAgc2V0IHsNCiAgICAgICAgICAgIHRoaXMuX2hlYWRlcnMgPSB2YWx1ZTsNCiAgICAgICAgfQ0KICAgIH0NCiAgICANCiAgICBwcml2YXRlIFN5c3RlbS5Db2xsZWN0aW9ucy5HZW5lcmljLkRpY3Rpb25hcnk8c3RyaW5nLCBzdHJpbmc+IHF1ZXJ5U3RyaW5nQXJyYXkgew0KICAgICAgICBnZXQgew0KICAgICAgICAgICAgaWYgKF9xdWVyeVN0cmluZ0FycmF5ID09IG51bGwpIHsNCl9xdWVyeVN0cmluZ0FycmF5ID0gbmV3IERpY3Rpb25hcnk8c3RyaW5nLCBzdHJpbmc+KCkgeyAgfTsNCiAgICAgICAgICAgIH0NCnJldHVybiBfcXVlcnlTdHJpbmdBcnJheTsNCiAgICAgICAgfQ0KICAgICAgICBzZXQgew0KICAgICAgICAgICAgdGhpcy5fcXVlcnlTdHJpbmdBcnJheSA9IHZhbHVlOw0KICAgICAgICB9DQogICAgfQ0KICAgIA0KICAgIHB1YmxpYyBMTV91cGRhdGVfY29sbGVjdG9yKCkgew0KICAgIH0NCiAgICANCiAgICBwdWJsaWMgTE1fdXBkYXRlX2NvbGxlY3RvcigNCiAgICAgICAgICAgICAgICBzdHJpbmcgZW5kUG9pbnQsIA0KICAgICAgICAgICAgICAgIHN0cmluZyBKc29ua2V5cGF0aCwgDQogICAgICAgICAgICAgICAgc3RyaW5nIGFjY2Vzc2lkLCANCiAgICAgICAgICAgICAgICBzdHJpbmcgcGFzc3dvcmQxLCANCiAgICAgICAgICAgICAgICBzdHJpbmcgaWRfcCwgDQogICAgICAgICAgICAgICAgc3RyaW5nIGRheU9mV2VlaywgDQogICAgICAgICAgICAgICAgc3RyaW5nIGRlc2NyaXB0aW9uX3AsIA0KICAgICAgICAgICAgICAgIHN0cmluZyBob3VyLCANCiAgICAgICAgICAgICAgICBzdHJpbmcgbWludXRlLCANCiAgICAgICAgICAgICAgICBzdHJpbmcgb2NjdXJyZW5jZSwgDQogICAgICAgICAgICAgICAgc3RyaW5nIHRpbWV6b25lLCANCiAgICAgICAgICAgICAgICBzdHJpbmcgdmVyc2lvbiwgDQogICAgICAgICAgICAgICAgc3RyaW5nIGJhY2t1cEFnZW50SWQsIA0KICAgICAgICAgICAgICAgIHN0cmluZyBjb2xsZWN0b3JHcm91cElkLCANCiAgICAgICAgICAgICAgICBzdHJpbmcgY3VzdG9tUHJvcGVydGllcywgDQogICAgICAgICAgICAgICAgc3RyaW5nIF9kZXNjcmlwdGlvbiwgDQogICAgICAgICAgICAgICAgc3RyaW5nIGVuYWJsZUZhaWxCYWNrLCANCiAgICAgICAgICAgICAgICBzdHJpbmcgZW5hYmxlRmFpbE92ZXJPbkNvbGxlY3RvckRldmljZSwgDQogICAgICAgICAgICAgICAgc3RyaW5nIGVzY2FsYXRpbmdDaGFpbklkLCANCiAgICAgICAgICAgICAgICBzdHJpbmcgbmVlZEF1dG9DcmVhdGVDb2xsZWN0b3JEZXZpY2UsIA0KICAgICAgICAgICAgICAgIHN0cmluZyBudW1iZXJPZkluc3RhbmNlcywgDQogICAgICAgICAgICAgICAgc3RyaW5nIG9uZXRpbWVEb3duZ3JhZGVJbmZvX2Rlc2NyaXB0aW9uLCANCiAgICAgICAgICAgICAgICBzdHJpbmcgbWFqb3JWZXJzaW9uLCANCiAgICAgICAgICAgICAgICBzdHJpbmcgbWlub3JWZXJzaW9uLCANCiAgICAgICAgICAgICAgICBzdHJpbmcgc3RhcnRFcG9jaCwgDQogICAgICAgICAgICAgICAgc3RyaW5nIG9uZXRpbWVEb3duZ3JhZGVJbmZvX3RpbWV6b25lLCANCiAgICAgICAgICAgICAgICBzdHJpbmcgb25ldGltZVVwZ3JhZGVJbmZvX2Rlc2NyaXB0aW9uLCANCiAgICAgICAgICAgICAgICBzdHJpbmcgb25ldGltZVVwZ3JhZGVJbmZvX21ham9yVmVyc2lvbiwgDQogICAgICAgICAgICAgICAgc3RyaW5nIG9uZXRpbWVVcGdyYWRlSW5mb19taW5vclZlcnNpb24sIA0KICAgICAgICAgICAgICAgIHN0cmluZyBvbmV0aW1lVXBncmFkZUluZm9fc3RhcnRFcG9jaCwgDQogICAgICAgICAgICAgICAgc3RyaW5nIG9uZXRpbWVVcGdyYWRlSW5mb190aW1lem9uZSwgDQogICAgICAgICAgICAgICAgc3RyaW5nIHJlc2VuZEl2YWwsIA0KICAgICAgICAgICAgICAgIHN0cmluZyBzcGVjaWZpZWRDb2xsZWN0b3JEZXZpY2VHcm91cElkLCANCiAgICAgICAgICAgICAgICBzdHJpbmcgc3VwcHJlc3NBbGVydENsZWFyKSB7DQogICAgICAgIHRoaXMuZW5kUG9pbnQgPSBlbmRQb2ludDsNCiAgICAgICAgdGhpcy5Kc29ua2V5cGF0aCA9IEpzb25rZXlwYXRoOw0KICAgICAgICB0aGlzLmFjY2Vzc2lkID0gYWNjZXNzaWQ7DQogICAgICAgIHRoaXMucGFzc3dvcmQxID0gcGFzc3dvcmQxOw0KICAgICAgICB0aGlzLmlkX3AgPSBpZF9wOw0KICAgICAgICB0aGlzLmRheU9mV2VlayA9IGRheU9mV2VlazsNCiAgICAgICAgdGhpcy5kZXNjcmlwdGlvbl9wID0gZGVzY3JpcHRpb25fcDsNCiAgICAgICAgdGhpcy5ob3VyID0gaG91cjsNCiAgICAgICAgdGhpcy5taW51dGUgPSBtaW51dGU7DQogICAgICAgIHRoaXMub2NjdXJyZW5jZSA9IG9jY3VycmVuY2U7DQogICAgICAgIHRoaXMudGltZXpvbmUgPSB0aW1lem9uZTsNCiAgICAgICAgdGhpcy52ZXJzaW9uID0gdmVyc2lvbjsNCiAgICAgICAgdGhpcy5iYWNrdXBBZ2VudElkID0gYmFja3VwQWdlbnRJZDsNCiAgICAgICAgdGhpcy5jb2xsZWN0b3JHcm91cElkID0gY29sbGVjdG9yR3JvdXBJZDsNCiAgICAgICAgdGhpcy5jdXN0b21Qcm9wZXJ0aWVzID0gY3VzdG9tUHJvcGVydGllczsNCiAgICAgICAgdGhpcy5fZGVzY3JpcHRpb24gPSBfZGVzY3JpcHRpb247DQogICAgICAgIHRoaXMuZW5hYmxlRmFpbEJhY2sgPSBlbmFibGVGYWlsQmFjazsNCiAgICAgICAgdGhpcy5lbmFibGVGYWlsT3Zlck9uQ29sbGVjdG9yRGV2aWNlID0gZW5hYmxlRmFpbE92ZXJPbkNvbGxlY3RvckRldmljZTsNCiAgICAgICAgdGhpcy5lc2NhbGF0aW5nQ2hhaW5JZCA9IGVzY2FsYXRpbmdDaGFpbklkOw0KICAgICAgICB0aGlzLm5lZWRBdXRvQ3JlYXRlQ29sbGVjdG9yRGV2aWNlID0gbmVlZEF1dG9DcmVhdGVDb2xsZWN0b3JEZXZpY2U7DQogICAgICAgIHRoaXMubnVtYmVyT2ZJbnN0YW5jZXMgPSBudW1iZXJPZkluc3RhbmNlczsNCiAgICAgICAgdGhpcy5vbmV0aW1lRG93bmdyYWRlSW5mb19kZXNjcmlwdGlvbiA9IG9uZXRpbWVEb3duZ3JhZGVJbmZvX2Rlc2NyaXB0aW9uOw0KICAgICAgICB0aGlzLm1ham9yVmVyc2lvbiA9IG1ham9yVmVyc2lvbjsNCiAgICAgICAgdGhpcy5taW5vclZlcnNpb24gPSBtaW5vclZlcnNpb247DQogICAgICAgIHRoaXMuc3RhcnRFcG9jaCA9IHN0YXJ0RXBvY2g7DQogICAgICAgIHRoaXMub25ldGltZURvd25ncmFkZUluZm9fdGltZXpvbmUgPSBvbmV0aW1lRG93bmdyYWRlSW5mb190aW1lem9uZTsNCiAgICAgICAgdGhpcy5vbmV0aW1lVXBncmFkZUluZm9fZGVzY3JpcHRpb24gPSBvbmV0aW1lVXBncmFkZUluZm9fZGVzY3JpcHRpb247DQogICAgICAgIHRoaXMub25ldGltZVVwZ3JhZGVJbmZvX21ham9yVmVyc2lvbiA9IG9uZXRpbWVVcGdyYWRlSW5mb19tYWpvclZlcnNpb247DQogICAgICAgIHRoaXMub25ldGltZVVwZ3JhZGVJbmZvX21pbm9yVmVyc2lvbiA9IG9uZXRpbWVVcGdyYWRlSW5mb19taW5vclZlcnNpb247DQogICAgICAgIHRoaXMub25ldGltZVVwZ3JhZGVJbmZvX3N0YXJ0RXBvY2ggPSBvbmV0aW1lVXBncmFkZUluZm9fc3RhcnRFcG9jaDsNCiAgICAgICAgdGhpcy5vbmV0aW1lVXBncmFkZUluZm9fdGltZXpvbmUgPSBvbmV0aW1lVXBncmFkZUluZm9fdGltZXpvbmU7DQogICAgICAgIHRoaXMucmVzZW5kSXZhbCA9IHJlc2VuZEl2YWw7DQogICAgICAgIHRoaXMuc3BlY2lmaWVkQ29sbGVjdG9yRGV2aWNlR3JvdXBJZCA9IHNwZWNpZmllZENvbGxlY3RvckRldmljZUdyb3VwSWQ7DQogICAgICAgIHRoaXMuc3VwcHJlc3NBbGVydENsZWFyID0gc3VwcHJlc3NBbGVydENsZWFyOw0KICAgIH0NCg0KDQogICAgICAgIHB1YmxpYyBhc3luYyBTeXN0ZW0uVGhyZWFkaW5nLlRhc2tzLlRhc2s8SUN1c3RvbUFjdGl2aXR5UmVzdWx0PiBFeGVjdXRlKCkNCiAgICAgICAgew0KDQogICAgICAgICAgICBIdHRwQ2xpZW50IGNsaWVudCA9IG5ldyBIdHRwQ2xpZW50KCk7DQogICAgICAgICAgICBTZXJ2aWNlUG9pbnRNYW5hZ2VyLkV4cGVjdDEwMENvbnRpbnVlID0gdHJ1ZTsNCiAgICAgICAgICAgIFNlcnZpY2VQb2ludE1hbmFnZXIuU2VjdXJpdHlQcm90b2NvbCA9IFNlY3VyaXR5UHJvdG9jb2xUeXBlLlRsczEyOw0KICAgICAgICAgICAgU2VydmljZVBvaW50TWFuYWdlci5TZXJ2ZXJDZXJ0aWZpY2F0ZVZhbGlkYXRpb25DYWxsYmFjayA9IG5ldyBTeXN0ZW0uTmV0LlNlY3VyaXR5LlJlbW90ZUNlcnRpZmljYXRlVmFsaWRhdGlvbkNhbGxiYWNrKEFjY2VwdEFsbENlcnRpZmljYXRpb25zKTsNCiAgICAgICAgICAgIFVyaUJ1aWxkZXIgVXJpQnVpbGRlciA9IG5ldyBVcmlCdWlsZGVyKGVuZFBvaW50KTsgDQogICAgICAgICAgICBVcmlCdWlsZGVyLlBhdGggPSAgIi9zYW50YWJhL3Jlc3QiICsgdXJpQnVpbGRlclBhdGg7DQogICAgICAgICAgICBVcmlCdWlsZGVyLlF1ZXJ5ID0gQXllaHVIZWxwZXIucXVlcnlTdHJpbmdCdWlsZGVyKHF1ZXJ5U3RyaW5nQXJyYXkpOw0KICAgICAgICAgICAgSHR0cFJlcXVlc3RNZXNzYWdlIG15SHR0cFJlcXVlc3RNZXNzYWdlID0gbmV3IEh0dHBSZXF1ZXN0TWVzc2FnZShuZXcgSHR0cE1ldGhvZChodHRwTWV0aG9kKSwgVXJpQnVpbGRlci5Ub1N0cmluZygpKTsNCiAgICAgICAgICAgDQogICAgICAgICAgICBzdHJpbmcgZGF0YSA9ICBwb3N0RGF0YTsNCg0KICAgICAgICAgICAgaWYgKHN0cmluZy5Jc051bGxPckVtcHR5KHBvc3REYXRhKSA9PSBmYWxzZSkNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgIGlmIChvbWl0SnNvbkVtcHR5b3JOdWxsKQ0KICAgICAgICAgICAgICAgICAgZGF0YSA9IEF5ZWh1SGVscGVyLm9taXRKc29uRW1wdHlvck51bGwocG9zdERhdGEpOw0KICAgICAgICAgICAgICAgICAgbXlIdHRwUmVxdWVzdE1lc3NhZ2UuQ29udGVudCA9IG5ldyBTdHJpbmdDb250ZW50KGRhdGEsIEVuY29kaW5nLlVURjgsIGNvbnRlbnRUeXBlKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgdmFyIGVwb2NoID0gKGxvbmcpKERhdGVUaW1lLlV0Y05vdyAtIG5ldyBEYXRlVGltZSgxOTcwLCAxLCAxKSkuVG90YWxNaWxsaXNlY29uZHM7DQogICAgICAgICAgICB2YXIgYXV0aEhlYWRlclZhbHVlID0gc3RyaW5nLkZvcm1hdCgiTE12MSB7MH06ezF9OnsyfSIsIGFjY2Vzc2lkLCBHZW5lcmF0ZVNpZ25hdHVyZShlcG9jaCwgaHR0cE1ldGhvZCwgZGF0YSwgdXJpQnVpbGRlclBhdGgsIHBhc3N3b3JkMSksIGVwb2NoKTsNCg0KICAgICAgICAgICAgY2xpZW50LkRlZmF1bHRSZXF1ZXN0SGVhZGVycy5BZGQoIkF1dGhvcml6YXRpb24iLCBhdXRoSGVhZGVyVmFsdWUpOw0KICAgICAgICAgICAgY2xpZW50LkRlZmF1bHRSZXF1ZXN0SGVhZGVycy5BZGQoIlgtVmVyc2lvbiIsICIyIik7DQoNCiAgICAgICAgICAgIEh0dHBSZXNwb25zZU1lc3NhZ2UgcmVzcG9uc2UgPSBjbGllbnQuU2VuZEFzeW5jKG15SHR0cFJlcXVlc3RNZXNzYWdlKS5SZXN1bHQ7DQoNCiAgICAgICAgICAgIHN3aXRjaCAocmVzcG9uc2UuU3RhdHVzQ29kZSkNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICBjYXNlIEh0dHBTdGF0dXNDb2RlLk5vQ29udGVudDoNCiAgICAgICAgICAgICAgICBjYXNlIEh0dHBTdGF0dXNDb2RlLkNyZWF0ZWQ6DQogICAgICAgICAgICAgICAgY2FzZSBIdHRwU3RhdHVzQ29kZS5BY2NlcHRlZDoNCiAgICAgICAgICAgICAgICBjYXNlIEh0dHBTdGF0dXNDb2RlLk9LOg0KICAgICAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgICAgICBpZiAoc3RyaW5nLklzTnVsbE9yRW1wdHkocmVzcG9uc2UuQ29udGVudC5SZWFkQXNTdHJpbmdBc3luYygpLlJlc3VsdCkgPT0gZmFsc2UpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuR2VuZXJhdGVBY3Rpdml0eVJlc3VsdChyZXNwb25zZS5Db250ZW50LlJlYWRBc1N0cmluZ0FzeW5jKCkuUmVzdWx0LCBKc29ua2V5cGF0aCk7DQogICAgICAgICAgICAgICAgICAgICAgICBlbHNlDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuR2VuZXJhdGVBY3Rpdml0eVJlc3VsdCgiU3VjY2VzcyIpOw0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgZGVmYXVsdDoNCiAgICAgICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHN0cmluZy5Jc051bGxPckVtcHR5KHJlc3BvbnNlLkNvbnRlbnQuUmVhZEFzU3RyaW5nQXN5bmMoKS5SZXN1bHQpID09IGZhbHNlKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFeGNlcHRpb24ocmVzcG9uc2UuQ29udGVudC5SZWFkQXNTdHJpbmdBc3luYygpLlJlc3VsdCk7DQogICAgICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChzdHJpbmcuSXNOdWxsT3JFbXB0eShyZXNwb25zZS5SZWFzb25QaHJhc2UpID09IGZhbHNlKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFeGNlcHRpb24ocmVzcG9uc2UuUmVhc29uUGhyYXNlKTsNCiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXhjZXB0aW9uKHJlc3BvbnNlLlN0YXR1c0NvZGUuVG9TdHJpbmcoKSk7DQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KDQogICAgICAgIHB1YmxpYyBib29sIEFjY2VwdEFsbENlcnRpZmljYXRpb25zKG9iamVjdCBzZW5kZXIsIFN5c3RlbS5TZWN1cml0eS5DcnlwdG9ncmFwaHkuWDUwOUNlcnRpZmljYXRlcy5YNTA5Q2VydGlmaWNhdGUgY2VydGlmaWNhdGlvbiwgU3lzdGVtLlNlY3VyaXR5LkNyeXB0b2dyYXBoeS5YNTA5Q2VydGlmaWNhdGVzLlg1MDlDaGFpbiBjaGFpbiwgU3lzdGVtLk5ldC5TZWN1cml0eS5Tc2xQb2xpY3lFcnJvcnMgc3NsUG9saWN5RXJyb3JzKQ0KICAgICAgICB7DQogICAgICAgICAgICByZXR1cm4gdHJ1ZTsNCiAgICAgICAgfQ0KDQogICAgICAgICBwcml2YXRlIHN0YXRpYyBzdHJpbmcgR2VuZXJhdGVTaWduYXR1cmUobG9uZyBlcG9jaCwgc3RyaW5nIGh0dHBWZXJiLCBzdHJpbmcgZGF0YSwgc3RyaW5nIHJlc291cmNlUGF0aCwgc3RyaW5nIGFjY2Vzc0tleSkNCiAgICAgICAgew0KICAgICAgICAgICAgdXNpbmcgKHZhciBobWFjID0gbmV3IFN5c3RlbS5TZWN1cml0eS5DcnlwdG9ncmFwaHkuSE1BQ1NIQTI1NiB7IEtleSA9IEVuY29kaW5nLlVURjguR2V0Qnl0ZXMoYWNjZXNzS2V5KSB9KQ0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgIHZhciBjb21wb3VuZFN0cmluZyA9IGh0dHBWZXJiICsgZXBvY2ggKyBkYXRhICsgcmVzb3VyY2VQYXRoOw0KICAgICAgICAgICAgICAgIHZhciBzaWduYXR1cmVCeXRlcyA9IGhtYWMuQ29tcHV0ZUhhc2goRW5jb2RpbmcuVVRGOC5HZXRCeXRlcyhjb21wb3VuZFN0cmluZykpOw0KICAgICAgICAgICAgICAgIHZhciBzaWduYXR1cmVIZXggPSBCaXRDb252ZXJ0ZXIuVG9TdHJpbmcoc2lnbmF0dXJlQnl0ZXMpLlJlcGxhY2UoIi0iLCAiIikuVG9Mb3dlcigpOw0KICAgICAgICAgICAgICAgIHJldHVybiBDb252ZXJ0LlRvQmFzZTY0U3RyaW5nKEVuY29kaW5nLlVURjguR2V0Qnl0ZXMoc2lnbmF0dXJlSGV4KSk7DQogICAgICAgICAgICB9DQogICAgICAgIH0NCiAgICB9DQp9&lt;/SourceCode&gt;
&lt;/Activity&gt;</SourceCode>
  </ActivitySourceMetadata>
</ActivityExportMetadata>