<?xml version="1.0" encoding="utf-16"?>
<ActivityExportMetadata>
  <ActivityMetadata>
    <Name>LM update dashboard group</Name>
    <Label>LM update dashboard group</Label>
    <Color>#EF712F</Color>
    <Description>LM update dashboard group</Description>
    <HelpHtml>&lt;p&gt;&lt;br&gt;#     LogicMonitor&lt;/br&gt;
&lt;br&gt;update dashboard group&lt;/br&gt;
&lt;br&gt;LM update dashboard group&lt;/br&gt;
&lt;br&gt;Method: Patch&lt;/br&gt;
&lt;br&gt;OperationID: patchDashboardGroupById&lt;/br&gt;
&lt;br&gt;EndPoint:&lt;/br&gt;
&lt;br&gt;/dashboard/groups/{id}&lt;/br&gt;
&lt;br&gt;Usage: widgetTokens[]&lt;/br&gt;
&lt;br&gt;[{
  &quot;name&quot;: &quot;%widgetTokens_name%&quot;,
  &quot;value&quot;: &quot;%value%&quot;
}]&lt;/br&gt;
 &lt;/p&gt;</HelpHtml>
  </ActivityMetadata>
  <ActivityGroupMetadata>
    <Label>LogicMonitor</Label>
    <LabelKey>LOGICMONITOR</LabelKey>
    <Icon>fa-wrench</Icon>
    <Color>#EF712F</Color>
    <Description>custom</Description>
  </ActivityGroupMetadata>
  <ActivitySourceMetadata>
    <SourceCode>&lt;Activity&gt;
  &lt;Name&gt;LM update dashboard group&lt;/Name&gt;
  &lt;Version&gt;1.0.0.88&lt;/Version&gt;
  &lt;Platform&gt;Windows&lt;/Platform&gt;
  &lt;SourceType&gt;Executor&lt;/SourceType&gt;
  &lt;SourceCodeType&gt;CSHARP&lt;/SourceCodeType&gt;
  &lt;Enc&gt;False&lt;/Enc&gt;
  &lt;Remark /&gt;
  &lt;RequiresMap&gt;False&lt;/RequiresMap&gt;
  &lt;GlobalMemoryRequests /&gt;
  &lt;Assemblies&gt;
    &lt;Assembly type="0"&gt;System.XML.dll&lt;/Assembly&gt;
&lt;Assembly type="0"&gt;System.Data.dll&lt;/Assembly&gt;
&lt;Assembly type="0"&gt;System.dll&lt;/Assembly&gt;
&lt;Assembly type="0"&gt;System.Web.dll&lt;/Assembly&gt;
&lt;Assembly type="0"&gt;System.Net.Http.dll&lt;/Assembly&gt;

  &lt;/Assemblies&gt;
  &lt;SourceCode&gt;&lt;/SourceCode&gt;
&lt;/Activity&gt;</SourceCode>
  </ActivitySourceMetadata>
</ActivityExportMetadata>