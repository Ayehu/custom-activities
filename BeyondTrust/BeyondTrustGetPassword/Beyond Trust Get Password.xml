<?xml version="1.0" encoding="utf-16"?>
<ActivityExportMetadata>
  <ActivityMetadata>
    <Name>BeyondTrustGetPassword</Name>
    <Label>Beyond Trust Get Password</Label>
    <Color>#EF712F</Color>
    <Description>Beyond Trust Get Password</Description>
  </ActivityMetadata>
  <ActivityGroupMetadata>
    <Label>Imported Activities</Label>
    <LabelKey>IMPORTED_ACTIVITIES</LabelKey>
    <Icon>fa-wrench</Icon>
    <Color>#EF712F</Color>
    <Description>custom</Description>
  </ActivityGroupMetadata>
  <ActivitySourceMetadata>
    <SourceCode>&lt;Activity&gt;
  &lt;Name&gt;BeyondTrustGetPassword&lt;/Name&gt;
  &lt;Version&gt;1.0.0.11&lt;/Version&gt;
  &lt;Platform&gt;Windows&lt;/Platform&gt;
  &lt;SourceType&gt;Executor&lt;/SourceType&gt;
  &lt;SourceCodeType&gt;VBNET&lt;/SourceCodeType&gt;
  &lt;Enc&gt;False&lt;/Enc&gt;
  &lt;Remark /&gt;
  &lt;RequiresMap&gt;False&lt;/RequiresMap&gt;
  &lt;GlobalMemoryRequests /&gt;
  &lt;Assemblies&gt;
    &lt;Assembly type="0"&gt;System.XML.dll&lt;/Assembly&gt;
    &lt;Assembly type="0"&gt;System.Data.dll&lt;/Assembly&gt;
    &lt;Assembly type="0"&gt;System.dll&lt;/Assembly&gt;
    &lt;Assembly type="0"&gt;System.Net.dll&lt;/Assembly&gt;
    &lt;Assembly type="0"&gt;System.Net.Http.Dll&lt;/Assembly&gt;
    &lt;Assembly type="1"&gt;C:\libs\newtonsoft.Json.dll&lt;/Assembly&gt;
  &lt;/Assemblies&gt;
  &lt;SourceCode&gt;&lt;/SourceCode&gt;
&lt;/Activity&gt;</SourceCode>
  </ActivitySourceMetadata>
</ActivityExportMetadata>