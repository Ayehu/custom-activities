<?xml version="1.0" encoding="utf-16"?>
<ActivityExportMetadata>
  <ActivityMetadata>
    <Name>ZM Update Locked Settings</Name>
    <Label>ZM Update Locked Settings</Label>
    <Color>#EF712F</Color>
    <Description>Update a [group's](https://support.zoom.us/hc/en-us/articles/204519819-Group-Management-) locked settings. If you lock a setting, the group members will not be able to modify it individually. Note: The `force_pmi_jbh_password` field under meeting settings is planned to be deprecated on September 22, 2019. This field will be replaced by another field that will provide the same functionality.

**Prerequisite**: Pro, Business, or Education account
**Scopes**: `group:write:admin`
 </Description>
    <HelpHtml>&lt;p&gt;&lt;br&gt;#     Zoom&lt;/br&gt;
&lt;br&gt;Update Locked Settings&lt;/br&gt;
&lt;br&gt;Update a [group&#39;s](https://support.zoom.us/hc/en-us/articles/204519819-Group-Management-) locked settings. If you lock a setting, the group members will not be able to modify it individually. Note: The `force_pmi_jbh_password` field under meeting settings is planned to be deprecated on September 22, 2019. This field will be replaced by another field that will provide the same functionality.

**Prerequisite**: Pro, Business, or Education account
**Scopes**: `group:write:admin`
 &lt;/br&gt;
&lt;br&gt;Method: Patch&lt;/br&gt;
&lt;br&gt;OperationID: groupLockedSettings&lt;/br&gt;
&lt;br&gt;EndPoint:&lt;/br&gt;
&lt;br&gt;/groups/{groupId}/lock_settings&lt;/br&gt;
 &lt;/p&gt;</HelpHtml>
  </ActivityMetadata>
  <ActivityGroupMetadata>
    <Label>Zoom</Label>
    <LabelKey>ZOOM</LabelKey>
    <Icon>fa-wrench</Icon>
    <Color>#EF712F</Color>
    <Description>custom</Description>
  </ActivityGroupMetadata>
  <ActivitySourceMetadata>
    <SourceCode>&lt;Activity&gt;
  &lt;Name&gt;ZM Update Locked Settings&lt;/Name&gt;
  &lt;Version&gt;1.0.0.88&lt;/Version&gt;
  &lt;Platform&gt;Windows&lt;/Platform&gt;
  &lt;SourceType&gt;Executor&lt;/SourceType&gt;
  &lt;SourceCodeType&gt;CSHARP&lt;/SourceCodeType&gt;
  &lt;Enc&gt;False&lt;/Enc&gt;
  &lt;Remark /&gt;
  &lt;RequiresMap&gt;False&lt;/RequiresMap&gt;
  &lt;GlobalMemoryRequests /&gt;
  &lt;Assemblies&gt;
    &lt;Assembly type="0"&gt;System.XML.dll&lt;/Assembly&gt;
&lt;Assembly type="0"&gt;System.Data.dll&lt;/Assembly&gt;
&lt;Assembly type="0"&gt;System.dll&lt;/Assembly&gt;
&lt;Assembly type="0"&gt;System.Web.dll&lt;/Assembly&gt;
&lt;Assembly type="0"&gt;System.Net.Http.dll&lt;/Assembly&gt;

  &lt;/Assemblies&gt;
  &lt;SourceCode&gt;dXNpbmcgU3lzdGVtOw0KdXNpbmcgQXllaHUuU2RrLkFjdGl2aXR5Q3JlYXRpb24uSW50ZXJmYWNlczsNCnVzaW5nIEF5ZWh1LlNkay5BY3Rpdml0eUNyZWF0aW9uLkV4dGVuc2lvbjsNCnVzaW5nIEF5ZWh1LlNkay5BY3Rpdml0eUNyZWF0aW9uLkhlbHBlcnM7DQp1c2luZyBTeXN0ZW0uTmV0Ow0KdXNpbmcgU3lzdGVtLk5ldC5IdHRwOw0KdXNpbmcgU3lzdGVtLlRleHQ7DQp1c2luZyBTeXN0ZW0uQ29sbGVjdGlvbnMuR2VuZXJpYzsNCg0KbmFtZXNwYWNlIEF5ZWh1Llpvb20NCnsNCiAgICBwdWJsaWMgY2xhc3MgWk1fVXBkYXRlX0xvY2tlZF9TZXR0aW5ncyA6IElBY3Rpdml0eUFzeW5jDQogICAgew0KDQoNCiAgICANCiAgICBwdWJsaWMgc3RyaW5nIEpzb25rZXlwYXRoID0gImxvY2tfc2V0dGluZ3MiOw0KICAgIA0KICAgIHB1YmxpYyBzdHJpbmcgYXBpa2V5ID0gIiI7DQogICAgDQogICAgcHVibGljIHN0cmluZyBwYXNzd29yZDEgPSAiIjsNCiAgICANCiAgICBwdWJsaWMgc3RyaW5nIGdyb3VwSWQgPSAiIjsNCiAgICANCiAgICBwdWJsaWMgc3RyaW5nIGhvc3RfdmlkZW8gPSAiIjsNCiAgICANCiAgICBwdWJsaWMgc3RyaW5nIHBhcnRpY2lwYW50X3ZpZGVvID0gIiI7DQogICAgDQogICAgcHVibGljIHN0cmluZyBhdWRpb190eXBlID0gIiI7DQogICAgDQogICAgcHVibGljIHN0cmluZyBqb2luX2JlZm9yZV9ob3N0ID0gIiI7DQogICAgDQogICAgcHVibGljIHN0cmluZyBmb3JjZV9wbWlfamJoX3Bhc3N3b3JkID0gIiI7DQogICAgDQogICAgcHVibGljIHN0cmluZyByZXF1aXJlX3Bhc3N3b3JkX2Zvcl9zY2hlZHVsaW5nX25ld19tZWV0aW5ncyA9ICIiOw0KICAgIA0KICAgIHB1YmxpYyBzdHJpbmcgcmVxdWlyZV9wYXNzd29yZF9mb3JfaW5zdGFudF9tZWV0aW5ncyA9ICIiOw0KICAgIA0KICAgIHB1YmxpYyBzdHJpbmcgcmVxdWlyZV9wYXNzd29yZF9mb3JfcG1pX21lZXRpbmdzID0gIiI7DQogICAgDQogICAgcHVibGljIHN0cmluZyBwc3RuX3Bhc3N3b3JkX3Byb3RlY3RlZCA9ICIiOw0KICAgIA0KICAgIHB1YmxpYyBzdHJpbmcgbXV0ZV91cG9uX2VudHJ5ID0gIiI7DQogICAgDQogICAgcHVibGljIHN0cmluZyB1cGNvbWluZ19tZWV0aW5nX3JlbWluZGVyID0gIiI7DQogICAgDQogICAgcHVibGljIHN0cmluZyBtZWV0aW5nX2F1dGhlbnRpY2F0aW9uID0gIiI7DQogICAgDQogICAgcHVibGljIHN0cmluZyBlMmVfZW5jcnlwdGlvbiA9ICIiOw0KICAgIA0KICAgIHB1YmxpYyBzdHJpbmcgY2hhdCA9ICIiOw0KICAgIA0KICAgIHB1YmxpYyBzdHJpbmcgcHJpdmF0ZV9jaGF0ID0gIiI7DQogICAgDQogICAgcHVibGljIHN0cmluZyBhdXRvX3NhdmluZ19jaGF0ID0gIiI7DQogICAgDQogICAgcHVibGljIHN0cmluZyBlbnRyeV9leGl0X2NoaW1lID0gIiI7DQogICAgDQogICAgcHVibGljIHN0cmluZyBmZWVkYmFjayA9ICIiOw0KICAgIA0KICAgIHB1YmxpYyBzdHJpbmcgcG9zdF9tZWV0aW5nX2ZlZWRiYWNrID0gIiI7DQogICAgDQogICAgcHVibGljIHN0cmluZyBjb19ob3N0ID0gIiI7DQogICAgDQogICAgcHVibGljIHN0cmluZyBwb2xsaW5nID0gIiI7DQogICAgDQogICAgcHVibGljIHN0cmluZyBhdHRlbmRlZV9vbl9ob2xkID0gIiI7DQogICAgDQogICAgcHVibGljIHN0cmluZyBzaG93X21lZXRpbmdfY29udHJvbF90b29sYmFyID0gIiI7DQogICAgDQogICAgcHVibGljIHN0cmluZyBhbGxvd19zaG93X3pvb21fd2luZG93cyA9ICIiOw0KICAgIA0KICAgIHB1YmxpYyBzdHJpbmcgYW5ub3RhdGlvbiA9ICIiOw0KICAgIA0KICAgIHB1YmxpYyBzdHJpbmcgd2hpdGVib2FyZCA9ICIiOw0KICAgIA0KICAgIHB1YmxpYyBzdHJpbmcgcmVtb3RlX2NvbnRyb2wgPSAiIjsNCiAgICANCiAgICBwdWJsaWMgc3RyaW5nIG5vbl92ZXJiYWxfZmVlZGJhY2sgPSAiIjsNCiAgICANCiAgICBwdWJsaWMgc3RyaW5nIGJyZWFrb3V0X3Jvb20gPSAiIjsNCiAgICANCiAgICBwdWJsaWMgc3RyaW5nIHJlbW90ZV9zdXBwb3J0ID0gIiI7DQogICAgDQogICAgcHVibGljIHN0cmluZyBjbG9zZWRfY2FwdGlvbiA9ICIiOw0KICAgIA0KICAgIHB1YmxpYyBzdHJpbmcgZmFyX2VuZF9jYW1lcmFfY29udHJvbCA9ICIiOw0KICAgIA0KICAgIHB1YmxpYyBzdHJpbmcgZ3JvdXBfaGQgPSAiIjsNCiAgICANCiAgICBwdWJsaWMgc3RyaW5nIHZpcnR1YWxfYmFja2dyb3VuZCA9ICIiOw0KICAgIA0KICAgIHB1YmxpYyBzdHJpbmcgYWxlcnRfZ3Vlc3Rfam9pbiA9ICIiOw0KICAgIA0KICAgIHB1YmxpYyBzdHJpbmcgYXV0b19hbnN3ZXIgPSAiIjsNCiAgICANCiAgICBwdWJsaWMgc3RyaW5nIHNlbmRpbmdfZGVmYXVsdF9lbWFpbF9pbnZpdGVzID0gIiI7DQogICAgDQogICAgcHVibGljIHN0cmluZyB1c2VfaHRtbF9mb3JtYXRfZW1haWwgPSAiIjsNCiAgICANCiAgICBwdWJsaWMgc3RyaW5nIHN0ZXJlb19hdWRpbyA9ICIiOw0KICAgIA0KICAgIHB1YmxpYyBzdHJpbmcgb3JpZ2luYWxfYXVkaW8gPSAiIjsNCiAgICANCiAgICBwdWJsaWMgc3RyaW5nIHNjcmVlbl9zaGFyaW5nID0gIiI7DQogICAgDQogICAgcHVibGljIHN0cmluZyB3YWl0aW5nX3Jvb20gPSAiIjsNCiAgICANCiAgICBwdWJsaWMgc3RyaW5nIHNob3dfYnJvd3Nlcl9qb2luX2xpbmsgPSAiIjsNCiAgICANCiAgICBwdWJsaWMgc3RyaW5nIGNsb3VkX3JlY29yZGluZ19hdmFpbGFibGVfcmVtaW5kZXIgPSAiIjsNCiAgICANCiAgICBwdWJsaWMgc3RyaW5nIGpiaF9yZW1pbmRlciA9ICIiOw0KICAgIA0KICAgIHB1YmxpYyBzdHJpbmcgY2FuY2VsX21lZXRpbmdfcmVtaW5kZXIgPSAiIjsNCiAgICANCiAgICBwdWJsaWMgc3RyaW5nIGFsdGVybmF0aXZlX2hvc3RfcmVtaW5kZXIgPSAiIjsNCiAgICANCiAgICBwdWJsaWMgc3RyaW5nIHNjaGVkdWxlX2Zvcl9ob3N0X3JlbWluZGVyID0gIiI7DQogICAgDQogICAgcHVibGljIHN0cmluZyBsb2NhbF9yZWNvcmRpbmcgPSAiIjsNCiAgICANCiAgICBwdWJsaWMgc3RyaW5nIGNsb3VkX3JlY29yZGluZyA9ICIiOw0KICAgIA0KICAgIHB1YmxpYyBzdHJpbmcgYXV0b19yZWNvcmRpbmcgPSAiIjsNCiAgICANCiAgICBwdWJsaWMgc3RyaW5nIGNsb3VkX3JlY29yZGluZ19kb3dubG9hZCA9ICIiOw0KICAgIA0KICAgIHB1YmxpYyBzdHJpbmcgYWNjb3VudF91c2VyX2FjY2Vzc19yZWNvcmRpbmcgPSAiIjsNCiAgICANCiAgICBwdWJsaWMgc3RyaW5nIGhvc3RfZGVsZXRlX2Nsb3VkX3JlY29yZGluZyA9ICIiOw0KICAgIA0KICAgIHB1YmxpYyBzdHJpbmcgYXV0b19kZWxldGVfY21yID0gIiI7DQogICAgDQogICAgcHVibGljIHN0cmluZyByZWNvcmRpbmdfYXV0aGVudGljYXRpb24gPSAiIjsNCiAgICANCiAgICBwdWJsaWMgc3RyaW5nIHRoaXJkX3BhcnR5X2F1ZGlvID0gIiI7DQogICAgDQogICAgcHJpdmF0ZSBib29sIG9taXRKc29uRW1wdHlvck51bGwgPSB0cnVlOw0KICAgIA0KICAgIHByaXZhdGUgc3RyaW5nIGNvbnRlbnRUeXBlID0gImFwcGxpY2F0aW9uL2pzb24iOw0KICAgIA0KICAgIHByaXZhdGUgc3RyaW5nIGVuZFBvaW50ID0gImh0dHBzOi8vYXBpLnpvb20udXMiOw0KICAgIA0KICAgIHByaXZhdGUgc3RyaW5nIGh0dHBNZXRob2QgPSAiUEFUQ0giOw0KICAgIA0KICAgIHByaXZhdGUgc3RyaW5nIF91cmlCdWlsZGVyUGF0aDsNCiAgICANCiAgICBwcml2YXRlIHN0cmluZyBfcG9zdERhdGE7DQogICAgDQogICAgcHJpdmF0ZSBTeXN0ZW0uQ29sbGVjdGlvbnMuR2VuZXJpYy5EaWN0aW9uYXJ5PHN0cmluZywgc3RyaW5nPiBfaGVhZGVyczsNCiAgICANCiAgICBwcml2YXRlIFN5c3RlbS5Db2xsZWN0aW9ucy5HZW5lcmljLkRpY3Rpb25hcnk8c3RyaW5nLCBzdHJpbmc+IF9xdWVyeVN0cmluZ0FycmF5Ow0KICAgIA0KICAgIHByaXZhdGUgc3RyaW5nIHVyaUJ1aWxkZXJQYXRoIHsNCiAgICAgICAgZ2V0IHsNCiAgICAgICAgICAgIGlmIChzdHJpbmcuSXNOdWxsT3JFbXB0eShfdXJpQnVpbGRlclBhdGgpKSB7DQpfdXJpQnVpbGRlclBhdGggPSBzdHJpbmcuRm9ybWF0KCJ2Mi9ncm91cHMvezB9L2xvY2tfc2V0dGluZ3MiLGdyb3VwSWQpOw0KICAgICAgICAgICAgfQ0KcmV0dXJuIF91cmlCdWlsZGVyUGF0aDsNCiAgICAgICAgfQ0KICAgICAgICBzZXQgew0KICAgICAgICAgICAgdGhpcy5fdXJpQnVpbGRlclBhdGggPSB2YWx1ZTsNCiAgICAgICAgfQ0KICAgIH0NCiAgICANCiAgICBwcml2YXRlIHN0cmluZyBwb3N0RGF0YSB7DQogICAgICAgIGdldCB7DQogICAgICAgICAgICBpZiAoc3RyaW5nLklzTnVsbE9yRW1wdHkoX3Bvc3REYXRhKSkgew0KX3Bvc3REYXRhID0gc3RyaW5nLkZvcm1hdCgie3sgXCJzY2hlZHVsZV9tZWV0aW5nXCI6IHt7ICAgXCJob3N0X3ZpZGVvXCI6IFwiezB9XCIsICAgIFwicGFydGljaXBhbnRfdmlkZW9cIjogXCJ7MX1cIiwgICAgXCJhdWRpb190eXBlXCI6IFwiezJ9XCIsICAgIFwiam9pbl9iZWZvcmVfaG9zdFwiOiBcInszfVwiLCAgICBcImZvcmNlX3BtaV9qYmhfcGFzc3dvcmRcIjogXCJ7NH1cIiwgICAgXCJyZXF1aXJlX3Bhc3N3b3JkX2Zvcl9zY2hlZHVsaW5nX25ld19tZWV0aW5nc1wiOiBcIns1fVwiLCAgICBcInJlcXVpcmVfcGFzc3dvcmRfZm9yX2luc3RhbnRfbWVldGluZ3NcIjogXCJ7Nn1cIiwgICAgXCJyZXF1aXJlX3Bhc3N3b3JkX2Zvcl9wbWlfbWVldGluZ3NcIjogXCJ7N31cIiwgICAgXCJwc3RuX3Bhc3N3b3JkX3Byb3RlY3RlZFwiOiBcIns4fVwiLCAgICBcIm11dGVfdXBvbl9lbnRyeVwiOiBcIns5fVwiLCAgICBcInVwY29taW5nX21lZXRpbmdfcmVtaW5kZXJcIjogXCJ7MTB9XCIsICAgIFwibWVldGluZ19hdXRoZW50aWNhdGlvblwiOiBcInsxMX1cIiAgIH19LCAgXCJpbl9tZWV0aW5nXCI6IHt7ICAgXCJlMmVfZW5jcnlwdGlvblwiOiBcInsxMn1cIiwgICAgXCJjaGF0XCI6IFwiezEzfVwiLCAgICBcInByaXZhdGVfY2hhdFwiOiBcInsxNH1cIiwgICAgXCJhdXRvX3NhdmluZ19jaGF0XCI6IFwiezE1fVwiLCAgICBcImVudHJ5X2V4aXRfY2hpbWVcIjogXCJ7MTZ9XCIsICAgIFwiZmVlZGJhY2tcIjogXCJ7MTd9XCIsICAgIFwicG9zdF9tZWV0aW5nX2ZlZWRiYWNrXCI6IFwiezE4fVwiLCAgICBcImNvX2hvc3RcIjogXCJ7MTl9XCIsICAgIFwicG9sbGluZ1wiOiBcInsyMH1cIiwgICAgXCJhdHRlbmRlZV9vbl9ob2xkXCI6IFwiezIxfVwiLCAgICBcInNob3dfbWVldGluZ19jb250cm9sX3Rvb2xiYXJcIjogXCJ7MjJ9XCIsICAgIFwiYWxsb3dfc2hvd196b29tX3dpbmRvd3NcIjogXCJ7MjN9XCIsICAgIFwiYW5ub3RhdGlvblwiOiBcInsyNH1cIiwgICAgXCJ3aGl0ZWJvYXJkXCI6IFwiezI1fVwiLCAgICBcInJlbW90ZV9jb250cm9sXCI6IFwiezI2fVwiLCAgICBcIm5vbl92ZXJiYWxfZmVlZGJhY2tcIjogXCJ7Mjd9XCIsICAgIFwiYnJlYWtvdXRfcm9vbVwiOiBcInsyOH1cIiwgICAgXCJyZW1vdGVfc3VwcG9ydFwiOiBcInsyOX1cIiwgICAgXCJjbG9zZWRfY2FwdGlvblwiOiBcInszMH1cIiwgICAgXCJmYXJfZW5kX2NhbWVyYV9jb250cm9sXCI6IFwiezMxfVwiLCAgICBcImdyb3VwX2hkXCI6IFwiezMyfVwiLCAgICBcInZpcnR1YWxfYmFja2dyb3VuZFwiOiBcInszM31cIiwgICAgXCJhbGVydF9ndWVzdF9qb2luXCI6IFwiezM0fVwiLCAgICBcImF1dG9fYW5zd2VyXCI6IFwiezM1fVwiLCAgICBcInNlbmRpbmdfZGVmYXVsdF9lbWFpbF9pbnZpdGVzXCI6IFwiezM2fVwiLCAgICBcInVzZV9odG1sX2Zvcm1hdF9lbWFpbFwiOiBcInszN31cIiwgICAgXCJzdGVyZW9fYXVkaW9cIjogXCJ7Mzh9XCIsICAgIFwib3JpZ2luYWxfYXVkaW9cIjogXCJ7Mzl9XCIsICAgIFwic2NyZWVuX3NoYXJpbmdcIjogXCJ7NDB9XCIsICAgIFwid2FpdGluZ19yb29tXCI6IFwiezQxfVwiLCAgICBcInNob3dfYnJvd3Nlcl9qb2luX2xpbmtcIjogXCJ7NDJ9XCIgICB9fSwgIFwiZW1haWxfbm90aWZpY2F0aW9uXCI6IHt7ICAgXCJjbG91ZF9yZWNvcmRpbmdfYXZhaWxhYmxlX3JlbWluZGVyXCI6IFwiezQzfVwiLCAgICBcImpiaF9yZW1pbmRlclwiOiBcIns0NH1cIiwgICAgXCJjYW5jZWxfbWVldGluZ19yZW1pbmRlclwiOiBcIns0NX1cIiwgICAgXCJhbHRlcm5hdGl2ZV9ob3N0X3JlbWluZGVyXCI6IFwiezQ2fVwiLCAgICBcInNjaGVkdWxlX2Zvcl9ob3N0X3JlbWluZGVyXCI6IFwiezQ3fVwiICAgfX0sICBcInJlY29yZGluZ1wiOiB7eyAgIFwibG9jYWxfcmVjb3JkaW5nXCI6IFwiezQ4fVwiLCAgICBcImNsb3VkX3JlY29yZGluZ1wiOiBcIns0OX1cIiwgICAgXCJhdXRvX3JlY29yZGluZ1wiOiBcIns1MH1cIiwgICAgXCJjbG91ZF9yZWNvcmRpbmdfZG93bmxvYWRcIjogXCJ7NTF9XCIsICAgIFwiYWNjb3VudF91c2VyX2FjY2Vzc19yZWNvcmRpbmdcIjogXCJ7NTJ9XCIsICAgIFwiaG9zdF9kZWxldGVfY2xvdWRfcmVjb3JkaW5nXCI6IFwiezUzfVwiLCAgICBcImF1dG9fZGVsZXRlX2NtclwiOiBcIns1NH1cIiwgICAgXCJyZWNvcmRpbmdfYXV0aGVudGljYXRpb25cIjogXCJ7NTV9XCIgICB9fSwgIFwidGVsZXBob255XCI6IHt7ICAgXCJ0aGlyZF9wYXJ0eV9hdWRpb1wiOiBcIns1Nn1cIiAgIH19IH19Iixob3N0X3ZpZGVvLHBhcnRpY2lwYW50X3ZpZGVvLGF1ZGlvX3R5cGUsam9pbl9iZWZvcmVfaG9zdCxmb3JjZV9wbWlfamJoX3Bhc3N3b3JkLHJlcXVpcmVfcGFzc3dvcmRfZm9yX3NjaGVkdWxpbmdfbmV3X21lZXRpbmdzLHJlcXVpcmVfcGFzc3dvcmRfZm9yX2luc3RhbnRfbWVldGluZ3MscmVxdWlyZV9wYXNzd29yZF9mb3JfcG1pX21lZXRpbmdzLHBzdG5fcGFzc3dvcmRfcHJvdGVjdGVkLG11dGVfdXBvbl9lbnRyeSx1cGNvbWluZ19tZWV0aW5nX3JlbWluZGVyLG1lZXRpbmdfYXV0aGVudGljYXRpb24sZTJlX2VuY3J5cHRpb24sY2hhdCxwcml2YXRlX2NoYXQsYXV0b19zYXZpbmdfY2hhdCxlbnRyeV9leGl0X2NoaW1lLGZlZWRiYWNrLHBvc3RfbWVldGluZ19mZWVkYmFjayxjb19ob3N0LHBvbGxpbmcsYXR0ZW5kZWVfb25faG9sZCxzaG93X21lZXRpbmdfY29udHJvbF90b29sYmFyLGFsbG93X3Nob3dfem9vbV93aW5kb3dzLGFubm90YXRpb24sd2hpdGVib2FyZCxyZW1vdGVfY29udHJvbCxub25fdmVyYmFsX2ZlZWRiYWNrLGJyZWFrb3V0X3Jvb20scmVtb3RlX3N1cHBvcnQsY2xvc2VkX2NhcHRpb24sZmFyX2VuZF9jYW1lcmFfY29udHJvbCxncm91cF9oZCx2aXJ0dWFsX2JhY2tncm91bmQsYWxlcnRfZ3Vlc3Rfam9pbixhdXRvX2Fuc3dlcixzZW5kaW5nX2RlZmF1bHRfZW1haWxfaW52aXRlcyx1c2VfaHRtbF9mb3JtYXRfZW1haWwsc3RlcmVvX2F1ZGlvLG9yaWdpbmFsX2F1ZGlvLHNjcmVlbl9zaGFyaW5nLHdhaXRpbmdfcm9vbSxzaG93X2Jyb3dzZXJfam9pbl9saW5rLGNsb3VkX3JlY29yZGluZ19hdmFpbGFibGVfcmVtaW5kZXIsamJoX3JlbWluZGVyLGNhbmNlbF9tZWV0aW5nX3JlbWluZGVyLGFsdGVybmF0aXZlX2hvc3RfcmVtaW5kZXIsc2NoZWR1bGVfZm9yX2hvc3RfcmVtaW5kZXIsbG9jYWxfcmVjb3JkaW5nLGNsb3VkX3JlY29yZGluZyxhdXRvX3JlY29yZGluZyxjbG91ZF9yZWNvcmRpbmdfZG93bmxvYWQsYWNjb3VudF91c2VyX2FjY2Vzc19yZWNvcmRpbmcsaG9zdF9kZWxldGVfY2xvdWRfcmVjb3JkaW5nLGF1dG9fZGVsZXRlX2NtcixyZWNvcmRpbmdfYXV0aGVudGljYXRpb24sdGhpcmRfcGFydHlfYXVkaW8pOw0KICAgICAgICAgICAgfQ0KcmV0dXJuIF9wb3N0RGF0YTsNCiAgICAgICAgfQ0KICAgICAgICBzZXQgew0KICAgICAgICAgICAgdGhpcy5fcG9zdERhdGEgPSB2YWx1ZTsNCiAgICAgICAgfQ0KICAgIH0NCiAgICANCiAgICBwcml2YXRlIFN5c3RlbS5Db2xsZWN0aW9ucy5HZW5lcmljLkRpY3Rpb25hcnk8c3RyaW5nLCBzdHJpbmc+IGhlYWRlcnMgew0KICAgICAgICBnZXQgew0KICAgICAgICAgICAgaWYgKF9oZWFkZXJzID09IG51bGwpIHsNCl9oZWFkZXJzID0gbmV3IERpY3Rpb25hcnk8c3RyaW5nLCBzdHJpbmc+KCkgeyB7ImF1dGhvcml6YXRpb24iLCJCZWFyZXIgIiArIEF5ZWh1SGVscGVyLkpXVFRva2VuKGFwaWtleSxwYXNzd29yZDEsIkhTMjU2IiwiSldUIiwgMTIwKX0gfTsNCiAgICAgICAgICAgIH0NCnJldHVybiBfaGVhZGVyczsNCiAgICAgICAgfQ0KICAgICAgICBzZXQgew0KICAgICAgICAgICAgdGhpcy5faGVhZGVycyA9IHZhbHVlOw0KICAgICAgICB9DQogICAgfQ0KICAgIA0KICAgIHByaXZhdGUgU3lzdGVtLkNvbGxlY3Rpb25zLkdlbmVyaWMuRGljdGlvbmFyeTxzdHJpbmcsIHN0cmluZz4gcXVlcnlTdHJpbmdBcnJheSB7DQogICAgICAgIGdldCB7DQogICAgICAgICAgICBpZiAoX3F1ZXJ5U3RyaW5nQXJyYXkgPT0gbnVsbCkgew0KX3F1ZXJ5U3RyaW5nQXJyYXkgPSBuZXcgRGljdGlvbmFyeTxzdHJpbmcsIHN0cmluZz4oKSB7ICB9Ow0KICAgICAgICAgICAgfQ0KcmV0dXJuIF9xdWVyeVN0cmluZ0FycmF5Ow0KICAgICAgICB9DQogICAgICAgIHNldCB7DQogICAgICAgICAgICB0aGlzLl9xdWVyeVN0cmluZ0FycmF5ID0gdmFsdWU7DQogICAgICAgIH0NCiAgICB9DQogICAgDQogICAgcHVibGljIFpNX1VwZGF0ZV9Mb2NrZWRfU2V0dGluZ3MoKSB7DQogICAgfQ0KICAgIA0KICAgIHB1YmxpYyBaTV9VcGRhdGVfTG9ja2VkX1NldHRpbmdzKA0KICAgICAgICAgICAgICAgIHN0cmluZyBKc29ua2V5cGF0aCwgDQogICAgICAgICAgICAgICAgc3RyaW5nIGFwaWtleSwgDQogICAgICAgICAgICAgICAgc3RyaW5nIHBhc3N3b3JkMSwgDQogICAgICAgICAgICAgICAgc3RyaW5nIGdyb3VwSWQsIA0KICAgICAgICAgICAgICAgIHN0cmluZyBob3N0X3ZpZGVvLCANCiAgICAgICAgICAgICAgICBzdHJpbmcgcGFydGljaXBhbnRfdmlkZW8sIA0KICAgICAgICAgICAgICAgIHN0cmluZyBhdWRpb190eXBlLCANCiAgICAgICAgICAgICAgICBzdHJpbmcgam9pbl9iZWZvcmVfaG9zdCwgDQogICAgICAgICAgICAgICAgc3RyaW5nIGZvcmNlX3BtaV9qYmhfcGFzc3dvcmQsIA0KICAgICAgICAgICAgICAgIHN0cmluZyByZXF1aXJlX3Bhc3N3b3JkX2Zvcl9zY2hlZHVsaW5nX25ld19tZWV0aW5ncywgDQogICAgICAgICAgICAgICAgc3RyaW5nIHJlcXVpcmVfcGFzc3dvcmRfZm9yX2luc3RhbnRfbWVldGluZ3MsIA0KICAgICAgICAgICAgICAgIHN0cmluZyByZXF1aXJlX3Bhc3N3b3JkX2Zvcl9wbWlfbWVldGluZ3MsIA0KICAgICAgICAgICAgICAgIHN0cmluZyBwc3RuX3Bhc3N3b3JkX3Byb3RlY3RlZCwgDQogICAgICAgICAgICAgICAgc3RyaW5nIG11dGVfdXBvbl9lbnRyeSwgDQogICAgICAgICAgICAgICAgc3RyaW5nIHVwY29taW5nX21lZXRpbmdfcmVtaW5kZXIsIA0KICAgICAgICAgICAgICAgIHN0cmluZyBtZWV0aW5nX2F1dGhlbnRpY2F0aW9uLCANCiAgICAgICAgICAgICAgICBzdHJpbmcgZTJlX2VuY3J5cHRpb24sIA0KICAgICAgICAgICAgICAgIHN0cmluZyBjaGF0LCANCiAgICAgICAgICAgICAgICBzdHJpbmcgcHJpdmF0ZV9jaGF0LCANCiAgICAgICAgICAgICAgICBzdHJpbmcgYXV0b19zYXZpbmdfY2hhdCwgDQogICAgICAgICAgICAgICAgc3RyaW5nIGVudHJ5X2V4aXRfY2hpbWUsIA0KICAgICAgICAgICAgICAgIHN0cmluZyBmZWVkYmFjaywgDQogICAgICAgICAgICAgICAgc3RyaW5nIHBvc3RfbWVldGluZ19mZWVkYmFjaywgDQogICAgICAgICAgICAgICAgc3RyaW5nIGNvX2hvc3QsIA0KICAgICAgICAgICAgICAgIHN0cmluZyBwb2xsaW5nLCANCiAgICAgICAgICAgICAgICBzdHJpbmcgYXR0ZW5kZWVfb25faG9sZCwgDQogICAgICAgICAgICAgICAgc3RyaW5nIHNob3dfbWVldGluZ19jb250cm9sX3Rvb2xiYXIsIA0KICAgICAgICAgICAgICAgIHN0cmluZyBhbGxvd19zaG93X3pvb21fd2luZG93cywgDQogICAgICAgICAgICAgICAgc3RyaW5nIGFubm90YXRpb24sIA0KICAgICAgICAgICAgICAgIHN0cmluZyB3aGl0ZWJvYXJkLCANCiAgICAgICAgICAgICAgICBzdHJpbmcgcmVtb3RlX2NvbnRyb2wsIA0KICAgICAgICAgICAgICAgIHN0cmluZyBub25fdmVyYmFsX2ZlZWRiYWNrLCANCiAgICAgICAgICAgICAgICBzdHJpbmcgYnJlYWtvdXRfcm9vbSwgDQogICAgICAgICAgICAgICAgc3RyaW5nIHJlbW90ZV9zdXBwb3J0LCANCiAgICAgICAgICAgICAgICBzdHJpbmcgY2xvc2VkX2NhcHRpb24sIA0KICAgICAgICAgICAgICAgIHN0cmluZyBmYXJfZW5kX2NhbWVyYV9jb250cm9sLCANCiAgICAgICAgICAgICAgICBzdHJpbmcgZ3JvdXBfaGQsIA0KICAgICAgICAgICAgICAgIHN0cmluZyB2aXJ0dWFsX2JhY2tncm91bmQsIA0KICAgICAgICAgICAgICAgIHN0cmluZyBhbGVydF9ndWVzdF9qb2luLCANCiAgICAgICAgICAgICAgICBzdHJpbmcgYXV0b19hbnN3ZXIsIA0KICAgICAgICAgICAgICAgIHN0cmluZyBzZW5kaW5nX2RlZmF1bHRfZW1haWxfaW52aXRlcywgDQogICAgICAgICAgICAgICAgc3RyaW5nIHVzZV9odG1sX2Zvcm1hdF9lbWFpbCwgDQogICAgICAgICAgICAgICAgc3RyaW5nIHN0ZXJlb19hdWRpbywgDQogICAgICAgICAgICAgICAgc3RyaW5nIG9yaWdpbmFsX2F1ZGlvLCANCiAgICAgICAgICAgICAgICBzdHJpbmcgc2NyZWVuX3NoYXJpbmcsIA0KICAgICAgICAgICAgICAgIHN0cmluZyB3YWl0aW5nX3Jvb20sIA0KICAgICAgICAgICAgICAgIHN0cmluZyBzaG93X2Jyb3dzZXJfam9pbl9saW5rLCANCiAgICAgICAgICAgICAgICBzdHJpbmcgY2xvdWRfcmVjb3JkaW5nX2F2YWlsYWJsZV9yZW1pbmRlciwgDQogICAgICAgICAgICAgICAgc3RyaW5nIGpiaF9yZW1pbmRlciwgDQogICAgICAgICAgICAgICAgc3RyaW5nIGNhbmNlbF9tZWV0aW5nX3JlbWluZGVyLCANCiAgICAgICAgICAgICAgICBzdHJpbmcgYWx0ZXJuYXRpdmVfaG9zdF9yZW1pbmRlciwgDQogICAgICAgICAgICAgICAgc3RyaW5nIHNjaGVkdWxlX2Zvcl9ob3N0X3JlbWluZGVyLCANCiAgICAgICAgICAgICAgICBzdHJpbmcgbG9jYWxfcmVjb3JkaW5nLCANCiAgICAgICAgICAgICAgICBzdHJpbmcgY2xvdWRfcmVjb3JkaW5nLCANCiAgICAgICAgICAgICAgICBzdHJpbmcgYXV0b19yZWNvcmRpbmcsIA0KICAgICAgICAgICAgICAgIHN0cmluZyBjbG91ZF9yZWNvcmRpbmdfZG93bmxvYWQsIA0KICAgICAgICAgICAgICAgIHN0cmluZyBhY2NvdW50X3VzZXJfYWNjZXNzX3JlY29yZGluZywgDQogICAgICAgICAgICAgICAgc3RyaW5nIGhvc3RfZGVsZXRlX2Nsb3VkX3JlY29yZGluZywgDQogICAgICAgICAgICAgICAgc3RyaW5nIGF1dG9fZGVsZXRlX2NtciwgDQogICAgICAgICAgICAgICAgc3RyaW5nIHJlY29yZGluZ19hdXRoZW50aWNhdGlvbiwgDQogICAgICAgICAgICAgICAgc3RyaW5nIHRoaXJkX3BhcnR5X2F1ZGlvKSB7DQogICAgICAgIHRoaXMuSnNvbmtleXBhdGggPSBKc29ua2V5cGF0aDsNCiAgICAgICAgdGhpcy5hcGlrZXkgPSBhcGlrZXk7DQogICAgICAgIHRoaXMucGFzc3dvcmQxID0gcGFzc3dvcmQxOw0KICAgICAgICB0aGlzLmdyb3VwSWQgPSBncm91cElkOw0KICAgICAgICB0aGlzLmhvc3RfdmlkZW8gPSBob3N0X3ZpZGVvOw0KICAgICAgICB0aGlzLnBhcnRpY2lwYW50X3ZpZGVvID0gcGFydGljaXBhbnRfdmlkZW87DQogICAgICAgIHRoaXMuYXVkaW9fdHlwZSA9IGF1ZGlvX3R5cGU7DQogICAgICAgIHRoaXMuam9pbl9iZWZvcmVfaG9zdCA9IGpvaW5fYmVmb3JlX2hvc3Q7DQogICAgICAgIHRoaXMuZm9yY2VfcG1pX2piaF9wYXNzd29yZCA9IGZvcmNlX3BtaV9qYmhfcGFzc3dvcmQ7DQogICAgICAgIHRoaXMucmVxdWlyZV9wYXNzd29yZF9mb3Jfc2NoZWR1bGluZ19uZXdfbWVldGluZ3MgPSByZXF1aXJlX3Bhc3N3b3JkX2Zvcl9zY2hlZHVsaW5nX25ld19tZWV0aW5nczsNCiAgICAgICAgdGhpcy5yZXF1aXJlX3Bhc3N3b3JkX2Zvcl9pbnN0YW50X21lZXRpbmdzID0gcmVxdWlyZV9wYXNzd29yZF9mb3JfaW5zdGFudF9tZWV0aW5nczsNCiAgICAgICAgdGhpcy5yZXF1aXJlX3Bhc3N3b3JkX2Zvcl9wbWlfbWVldGluZ3MgPSByZXF1aXJlX3Bhc3N3b3JkX2Zvcl9wbWlfbWVldGluZ3M7DQogICAgICAgIHRoaXMucHN0bl9wYXNzd29yZF9wcm90ZWN0ZWQgPSBwc3RuX3Bhc3N3b3JkX3Byb3RlY3RlZDsNCiAgICAgICAgdGhpcy5tdXRlX3Vwb25fZW50cnkgPSBtdXRlX3Vwb25fZW50cnk7DQogICAgICAgIHRoaXMudXBjb21pbmdfbWVldGluZ19yZW1pbmRlciA9IHVwY29taW5nX21lZXRpbmdfcmVtaW5kZXI7DQogICAgICAgIHRoaXMubWVldGluZ19hdXRoZW50aWNhdGlvbiA9IG1lZXRpbmdfYXV0aGVudGljYXRpb247DQogICAgICAgIHRoaXMuZTJlX2VuY3J5cHRpb24gPSBlMmVfZW5jcnlwdGlvbjsNCiAgICAgICAgdGhpcy5jaGF0ID0gY2hhdDsNCiAgICAgICAgdGhpcy5wcml2YXRlX2NoYXQgPSBwcml2YXRlX2NoYXQ7DQogICAgICAgIHRoaXMuYXV0b19zYXZpbmdfY2hhdCA9IGF1dG9fc2F2aW5nX2NoYXQ7DQogICAgICAgIHRoaXMuZW50cnlfZXhpdF9jaGltZSA9IGVudHJ5X2V4aXRfY2hpbWU7DQogICAgICAgIHRoaXMuZmVlZGJhY2sgPSBmZWVkYmFjazsNCiAgICAgICAgdGhpcy5wb3N0X21lZXRpbmdfZmVlZGJhY2sgPSBwb3N0X21lZXRpbmdfZmVlZGJhY2s7DQogICAgICAgIHRoaXMuY29faG9zdCA9IGNvX2hvc3Q7DQogICAgICAgIHRoaXMucG9sbGluZyA9IHBvbGxpbmc7DQogICAgICAgIHRoaXMuYXR0ZW5kZWVfb25faG9sZCA9IGF0dGVuZGVlX29uX2hvbGQ7DQogICAgICAgIHRoaXMuc2hvd19tZWV0aW5nX2NvbnRyb2xfdG9vbGJhciA9IHNob3dfbWVldGluZ19jb250cm9sX3Rvb2xiYXI7DQogICAgICAgIHRoaXMuYWxsb3dfc2hvd196b29tX3dpbmRvd3MgPSBhbGxvd19zaG93X3pvb21fd2luZG93czsNCiAgICAgICAgdGhpcy5hbm5vdGF0aW9uID0gYW5ub3RhdGlvbjsNCiAgICAgICAgdGhpcy53aGl0ZWJvYXJkID0gd2hpdGVib2FyZDsNCiAgICAgICAgdGhpcy5yZW1vdGVfY29udHJvbCA9IHJlbW90ZV9jb250cm9sOw0KICAgICAgICB0aGlzLm5vbl92ZXJiYWxfZmVlZGJhY2sgPSBub25fdmVyYmFsX2ZlZWRiYWNrOw0KICAgICAgICB0aGlzLmJyZWFrb3V0X3Jvb20gPSBicmVha291dF9yb29tOw0KICAgICAgICB0aGlzLnJlbW90ZV9zdXBwb3J0ID0gcmVtb3RlX3N1cHBvcnQ7DQogICAgICAgIHRoaXMuY2xvc2VkX2NhcHRpb24gPSBjbG9zZWRfY2FwdGlvbjsNCiAgICAgICAgdGhpcy5mYXJfZW5kX2NhbWVyYV9jb250cm9sID0gZmFyX2VuZF9jYW1lcmFfY29udHJvbDsNCiAgICAgICAgdGhpcy5ncm91cF9oZCA9IGdyb3VwX2hkOw0KICAgICAgICB0aGlzLnZpcnR1YWxfYmFja2dyb3VuZCA9IHZpcnR1YWxfYmFja2dyb3VuZDsNCiAgICAgICAgdGhpcy5hbGVydF9ndWVzdF9qb2luID0gYWxlcnRfZ3Vlc3Rfam9pbjsNCiAgICAgICAgdGhpcy5hdXRvX2Fuc3dlciA9IGF1dG9fYW5zd2VyOw0KICAgICAgICB0aGlzLnNlbmRpbmdfZGVmYXVsdF9lbWFpbF9pbnZpdGVzID0gc2VuZGluZ19kZWZhdWx0X2VtYWlsX2ludml0ZXM7DQogICAgICAgIHRoaXMudXNlX2h0bWxfZm9ybWF0X2VtYWlsID0gdXNlX2h0bWxfZm9ybWF0X2VtYWlsOw0KICAgICAgICB0aGlzLnN0ZXJlb19hdWRpbyA9IHN0ZXJlb19hdWRpbzsNCiAgICAgICAgdGhpcy5vcmlnaW5hbF9hdWRpbyA9IG9yaWdpbmFsX2F1ZGlvOw0KICAgICAgICB0aGlzLnNjcmVlbl9zaGFyaW5nID0gc2NyZWVuX3NoYXJpbmc7DQogICAgICAgIHRoaXMud2FpdGluZ19yb29tID0gd2FpdGluZ19yb29tOw0KICAgICAgICB0aGlzLnNob3dfYnJvd3Nlcl9qb2luX2xpbmsgPSBzaG93X2Jyb3dzZXJfam9pbl9saW5rOw0KICAgICAgICB0aGlzLmNsb3VkX3JlY29yZGluZ19hdmFpbGFibGVfcmVtaW5kZXIgPSBjbG91ZF9yZWNvcmRpbmdfYXZhaWxhYmxlX3JlbWluZGVyOw0KICAgICAgICB0aGlzLmpiaF9yZW1pbmRlciA9IGpiaF9yZW1pbmRlcjsNCiAgICAgICAgdGhpcy5jYW5jZWxfbWVldGluZ19yZW1pbmRlciA9IGNhbmNlbF9tZWV0aW5nX3JlbWluZGVyOw0KICAgICAgICB0aGlzLmFsdGVybmF0aXZlX2hvc3RfcmVtaW5kZXIgPSBhbHRlcm5hdGl2ZV9ob3N0X3JlbWluZGVyOw0KICAgICAgICB0aGlzLnNjaGVkdWxlX2Zvcl9ob3N0X3JlbWluZGVyID0gc2NoZWR1bGVfZm9yX2hvc3RfcmVtaW5kZXI7DQogICAgICAgIHRoaXMubG9jYWxfcmVjb3JkaW5nID0gbG9jYWxfcmVjb3JkaW5nOw0KICAgICAgICB0aGlzLmNsb3VkX3JlY29yZGluZyA9IGNsb3VkX3JlY29yZGluZzsNCiAgICAgICAgdGhpcy5hdXRvX3JlY29yZGluZyA9IGF1dG9fcmVjb3JkaW5nOw0KICAgICAgICB0aGlzLmNsb3VkX3JlY29yZGluZ19kb3dubG9hZCA9IGNsb3VkX3JlY29yZGluZ19kb3dubG9hZDsNCiAgICAgICAgdGhpcy5hY2NvdW50X3VzZXJfYWNjZXNzX3JlY29yZGluZyA9IGFjY291bnRfdXNlcl9hY2Nlc3NfcmVjb3JkaW5nOw0KICAgICAgICB0aGlzLmhvc3RfZGVsZXRlX2Nsb3VkX3JlY29yZGluZyA9IGhvc3RfZGVsZXRlX2Nsb3VkX3JlY29yZGluZzsNCiAgICAgICAgdGhpcy5hdXRvX2RlbGV0ZV9jbXIgPSBhdXRvX2RlbGV0ZV9jbXI7DQogICAgICAgIHRoaXMucmVjb3JkaW5nX2F1dGhlbnRpY2F0aW9uID0gcmVjb3JkaW5nX2F1dGhlbnRpY2F0aW9uOw0KICAgICAgICB0aGlzLnRoaXJkX3BhcnR5X2F1ZGlvID0gdGhpcmRfcGFydHlfYXVkaW87DQogICAgfQ0KDQoNCiAgICAgICAgcHVibGljIGFzeW5jIFN5c3RlbS5UaHJlYWRpbmcuVGFza3MuVGFzazxJQ3VzdG9tQWN0aXZpdHlSZXN1bHQ+IEV4ZWN1dGUoKQ0KICAgICAgICB7DQoNCiAgICAgICAgICAgIEh0dHBDbGllbnQgY2xpZW50ID0gbmV3IEh0dHBDbGllbnQoKTsNCiAgICAgICAgICAgIFNlcnZpY2VQb2ludE1hbmFnZXIuRXhwZWN0MTAwQ29udGludWUgPSB0cnVlOw0KICAgICAgICAgICAgU2VydmljZVBvaW50TWFuYWdlci5TZWN1cml0eVByb3RvY29sID0gU2VjdXJpdHlQcm90b2NvbFR5cGUuVGxzMTI7DQogICAgICAgICAgICBTZXJ2aWNlUG9pbnRNYW5hZ2VyLlNlcnZlckNlcnRpZmljYXRlVmFsaWRhdGlvbkNhbGxiYWNrID0gbmV3IFN5c3RlbS5OZXQuU2VjdXJpdHkuUmVtb3RlQ2VydGlmaWNhdGVWYWxpZGF0aW9uQ2FsbGJhY2soQWNjZXB0QWxsQ2VydGlmaWNhdGlvbnMpOw0KICAgICAgICAgICAgVXJpQnVpbGRlciBVcmlCdWlsZGVyID0gbmV3IFVyaUJ1aWxkZXIoZW5kUG9pbnQpOyANCiAgICAgICAgICAgIFVyaUJ1aWxkZXIuUGF0aCA9IHVyaUJ1aWxkZXJQYXRoOw0KICAgICAgICAgICAgVXJpQnVpbGRlci5RdWVyeSA9IEF5ZWh1SGVscGVyLnF1ZXJ5U3RyaW5nQnVpbGRlcihxdWVyeVN0cmluZ0FycmF5KTsNCiAgICAgICAgICAgIEh0dHBSZXF1ZXN0TWVzc2FnZSBteUh0dHBSZXF1ZXN0TWVzc2FnZSA9IG5ldyBIdHRwUmVxdWVzdE1lc3NhZ2UobmV3IEh0dHBNZXRob2QoaHR0cE1ldGhvZCksIFVyaUJ1aWxkZXIuVG9TdHJpbmcoKSk7DQogICAgICAgICAgIA0KICAgICAgICAgICAgaWYgKGNvbnRlbnRUeXBlID09ICJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQiKQ0KICAgICAgICAgICAgICAgIG15SHR0cFJlcXVlc3RNZXNzYWdlLkNvbnRlbnQgPSBBeWVodUhlbHBlci5mb3JtVXJsRW5jb2RlZENvbnRlbnQocG9zdERhdGEpOw0KICAgICAgICAgICAgZWxzZQ0KICAgICAgICAgICAgICBpZiAoc3RyaW5nLklzTnVsbE9yRW1wdHkocG9zdERhdGEpID09IGZhbHNlKQ0KICAgICAgICAgICAgICAgIGlmIChvbWl0SnNvbkVtcHR5b3JOdWxsKQ0KICAgICAgICAgICAgICAgICAgICBteUh0dHBSZXF1ZXN0TWVzc2FnZS5Db250ZW50ID0gbmV3IFN0cmluZ0NvbnRlbnQoQXllaHVIZWxwZXIub21pdEpzb25FbXB0eW9yTnVsbChwb3N0RGF0YSksIEVuY29kaW5nLlVURjgsICJhcHBsaWNhdGlvbi9qc29uIik7DQogICAgICAgICAgICAgICAgZWxzZQ0KICAgICAgICAgICAgICAgICAgICBteUh0dHBSZXF1ZXN0TWVzc2FnZS5Db250ZW50ID0gbmV3IFN0cmluZ0NvbnRlbnQocG9zdERhdGEsIEVuY29kaW5nLlVURjgsIGNvbnRlbnRUeXBlKTsNCg0KDQogICAgICAgICAgICBmb3JlYWNoIChLZXlWYWx1ZVBhaXI8c3RyaW5nLCBzdHJpbmc+IGhlYWRlcml0ZW0gaW4gaGVhZGVycykNCiAgICAgICAgICAgICAgICBjbGllbnQuRGVmYXVsdFJlcXVlc3RIZWFkZXJzLkFkZChoZWFkZXJpdGVtLktleSwgaGVhZGVyaXRlbS5WYWx1ZSk7DQoNCiAgICAgICAgICAgIEh0dHBSZXNwb25zZU1lc3NhZ2UgcmVzcG9uc2UgPSBjbGllbnQuU2VuZEFzeW5jKG15SHR0cFJlcXVlc3RNZXNzYWdlKS5SZXN1bHQ7DQoNCiAgICAgICAgICAgIHN3aXRjaCAocmVzcG9uc2UuU3RhdHVzQ29kZSkNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICBjYXNlIEh0dHBTdGF0dXNDb2RlLk5vQ29udGVudDoNCiAgICAgICAgICAgICAgICBjYXNlIEh0dHBTdGF0dXNDb2RlLkNyZWF0ZWQ6DQogICAgICAgICAgICAgICAgY2FzZSBIdHRwU3RhdHVzQ29kZS5BY2NlcHRlZDoNCiAgICAgICAgICAgICAgICBjYXNlIEh0dHBTdGF0dXNDb2RlLk9LOg0KICAgICAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgICAgICBpZiAoc3RyaW5nLklzTnVsbE9yRW1wdHkocmVzcG9uc2UuQ29udGVudC5SZWFkQXNTdHJpbmdBc3luYygpLlJlc3VsdCkgPT0gZmFsc2UpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuR2VuZXJhdGVBY3Rpdml0eVJlc3VsdChyZXNwb25zZS5Db250ZW50LlJlYWRBc1N0cmluZ0FzeW5jKCkuUmVzdWx0LCBKc29ua2V5cGF0aCk7DQogICAgICAgICAgICAgICAgICAgICAgICBlbHNlDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuR2VuZXJhdGVBY3Rpdml0eVJlc3VsdCgiU3VjY2VzcyIpOw0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgZGVmYXVsdDoNCiAgICAgICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHN0cmluZy5Jc051bGxPckVtcHR5KHJlc3BvbnNlLkNvbnRlbnQuUmVhZEFzU3RyaW5nQXN5bmMoKS5SZXN1bHQpID09IGZhbHNlKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFeGNlcHRpb24ocmVzcG9uc2UuQ29udGVudC5SZWFkQXNTdHJpbmdBc3luYygpLlJlc3VsdCk7DQogICAgICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChzdHJpbmcuSXNOdWxsT3JFbXB0eShyZXNwb25zZS5SZWFzb25QaHJhc2UpID09IGZhbHNlKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFeGNlcHRpb24ocmVzcG9uc2UuUmVhc29uUGhyYXNlKTsNCiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXhjZXB0aW9uKHJlc3BvbnNlLlN0YXR1c0NvZGUuVG9TdHJpbmcoKSk7DQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KDQogICAgICAgIHB1YmxpYyBib29sIEFjY2VwdEFsbENlcnRpZmljYXRpb25zKG9iamVjdCBzZW5kZXIsIFN5c3RlbS5TZWN1cml0eS5DcnlwdG9ncmFwaHkuWDUwOUNlcnRpZmljYXRlcy5YNTA5Q2VydGlmaWNhdGUgY2VydGlmaWNhdGlvbiwgU3lzdGVtLlNlY3VyaXR5LkNyeXB0b2dyYXBoeS5YNTA5Q2VydGlmaWNhdGVzLlg1MDlDaGFpbiBjaGFpbiwgU3lzdGVtLk5ldC5TZWN1cml0eS5Tc2xQb2xpY3lFcnJvcnMgc3NsUG9saWN5RXJyb3JzKQ0KICAgICAgICB7DQogICAgICAgICAgICByZXR1cm4gdHJ1ZTsNCiAgICAgICAgfQ0KICAgIH0NCn0=&lt;/SourceCode&gt;
&lt;/Activity&gt;</SourceCode>
  </ActivitySourceMetadata>
</ActivityExportMetadata>