<?xml version="1.0" encoding="utf-16"?>
<ActivityExportMetadata>
  <ActivityMetadata>
    <Name>ZM Update SIP Phone</Name>
    <Label>ZM Update SIP Phone</Label>
    <Color>#EF712F</Color>
    <Description>Zoomâ€™s Phone System Integration (PSI), also referred as SIP phones, enables an organization to leverage the Zoom client to complete a softphone registration to supported premise based PBX system. End users will have the ability to have softphone functionality within a single client while maintaining a comparable interface to Zoom Phone. Use this API to update information of a specific SIP Phone on a Zoom account.
**Prerequisites**:
* Currently only supported on Cisco and Avaya PBX systems. 
* The account owner or account admin must first enable SIP Phone Integration by contacting the [Sales](https://zoom.us/contactsales) team. **Scope:** `sip_phone:write:admin`
 </Description>
    <HelpHtml>&lt;p&gt; &lt;/p&gt;</HelpHtml>
  </ActivityMetadata>
  <ActivityGroupMetadata>
    <Label>Zoom</Label>
    <LabelKey>ZOOM</LabelKey>
    <Icon>fa-wrench</Icon>
    <Color>#EF712F</Color>
    <Description>custom</Description>
  </ActivityGroupMetadata>
  <ActivitySourceMetadata>
    <SourceCode>&lt;Activity&gt;
  &lt;Name&gt;ZM Update SIP Phone&lt;/Name&gt;
  &lt;Version&gt;1.0.0.88&lt;/Version&gt;
  &lt;Platform&gt;Windows&lt;/Platform&gt;
  &lt;SourceType&gt;Executor&lt;/SourceType&gt;
  &lt;SourceCodeType&gt;CSHARP&lt;/SourceCodeType&gt;
  &lt;Enc&gt;False&lt;/Enc&gt;
  &lt;Remark /&gt;
  &lt;RequiresMap&gt;False&lt;/RequiresMap&gt;
  &lt;GlobalMemoryRequests /&gt;
  &lt;Assemblies&gt;
    &lt;Assembly type="0"&gt;System.XML.dll&lt;/Assembly&gt;
&lt;Assembly type="0"&gt;System.Data.dll&lt;/Assembly&gt;
&lt;Assembly type="0"&gt;System.dll&lt;/Assembly&gt;
&lt;Assembly type="0"&gt;System.Web.dll&lt;/Assembly&gt;
&lt;Assembly type="0"&gt;System.Net.Http.dll&lt;/Assembly&gt;

  &lt;/Assemblies&gt;
  &lt;SourceCode&gt;dXNpbmcgU3lzdGVtOw0KdXNpbmcgQXllaHUuU2RrLkFjdGl2aXR5Q3JlYXRpb24uSW50ZXJmYWNlczsNCnVzaW5nIEF5ZWh1LlNkay5BY3Rpdml0eUNyZWF0aW9uLkV4dGVuc2lvbjsNCnVzaW5nIEF5ZWh1LlNkay5BY3Rpdml0eUNyZWF0aW9uLkhlbHBlcnM7DQp1c2luZyBTeXN0ZW0uTmV0Ow0KdXNpbmcgU3lzdGVtLk5ldC5IdHRwOw0KdXNpbmcgU3lzdGVtLlRleHQ7DQp1c2luZyBTeXN0ZW0uQ29sbGVjdGlvbnMuR2VuZXJpYzsNCg0KbmFtZXNwYWNlIEF5ZWh1LlNkay5BY3Rpdml0eUNyZWF0aW9uDQp7DQogICAgcHVibGljIGNsYXNzIEN1c3RvbUFjdGl2aXR5X1pNX1VwZGF0ZV9TSVBfUGhvbmUgOiBJQWN0aXZpdHlBc3luYw0KICAgIHsNCg0KDQogICAgDQogICAgcHVibGljIHN0cmluZyBKc29ua2V5cGF0aCA9ICIiOw0KICAgIA0KICAgIHB1YmxpYyBzdHJpbmcgYXBpa2V5ID0gIiI7DQogICAgDQogICAgcHVibGljIHN0cmluZyBwYXNzd29yZDEgPSAiIjsNCiAgICANCiAgICBwdWJsaWMgc3RyaW5nIHBob25lSWQgPSAiIjsNCiAgICANCiAgICBwdWJsaWMgc3RyaW5nIGRvbWFpbiA9ICIiOw0KICAgIA0KICAgIHB1YmxpYyBzdHJpbmcgcmVnaXN0ZXJfc2VydmVyID0gIiI7DQogICAgDQogICAgcHVibGljIHN0cmluZyB0cmFuc3BvcnRfcHJvdG9jb2wgPSAiIjsNCiAgICANCiAgICBwdWJsaWMgc3RyaW5nIHByb3h5X3NlcnZlciA9ICIiOw0KICAgIA0KICAgIHB1YmxpYyBzdHJpbmcgcmVnaXN0ZXJfc2VydmVyMiA9ICIiOw0KICAgIA0KICAgIHB1YmxpYyBzdHJpbmcgdHJhbnNwb3J0X3Byb3RvY29sMiA9ICIiOw0KICAgIA0KICAgIHB1YmxpYyBzdHJpbmcgcHJveHlfc2VydmVyMiA9ICIiOw0KICAgIA0KICAgIHB1YmxpYyBzdHJpbmcgcmVnaXN0ZXJfc2VydmVyMyA9ICIiOw0KICAgIA0KICAgIHB1YmxpYyBzdHJpbmcgdHJhbnNwb3J0X3Byb3RvY29sMyA9ICIiOw0KICAgIA0KICAgIHB1YmxpYyBzdHJpbmcgcHJveHlfc2VydmVyMyA9ICIiOw0KICAgIA0KICAgIHB1YmxpYyBzdHJpbmcgcmVnaXN0cmF0aW9uX2V4cGlyZV90aW1lID0gIiI7DQogICAgDQogICAgcHVibGljIHN0cmluZyB1c2VyX25hbWUgPSAiIjsNCiAgICANCiAgICBwdWJsaWMgc3RyaW5nIHBhc3N3b3JkID0gIiI7DQogICAgDQogICAgcHVibGljIHN0cmluZyBhdXRob3JpemF0aW9uX25hbWUgPSAiIjsNCiAgICANCiAgICBwdWJsaWMgc3RyaW5nIHZvaWNlX21haWwgPSAiIjsNCiAgICANCiAgICBwcml2YXRlIGJvb2wgb21pdEpzb25FbXB0eW9yTnVsbCA9IHRydWU7DQogICAgDQogICAgcHJpdmF0ZSBzdHJpbmcgY29udGVudFR5cGUgPSAiYXBwbGljYXRpb24vanNvbiI7DQogICAgDQogICAgcHJpdmF0ZSBzdHJpbmcgZW5kUG9pbnQgPSAiaHR0cHM6Ly9hcGkuem9vbS51cyI7DQogICAgDQogICAgcHJpdmF0ZSBzdHJpbmcgaHR0cE1ldGhvZCA9ICJQQVRDSCI7DQogICAgDQogICAgcHJpdmF0ZSBzdHJpbmcgdXJpQnVpbGRlclBhdGggew0KICAgICAgICBnZXQgew0KICAgICAgICAgICAgcmV0dXJuIHN0cmluZy5Gb3JtYXQoInYyL3NpcF9waG9uZXMvezB9IixwaG9uZUlkKTsNCiAgICAgICAgfQ0KICAgIH0NCiAgICANCiAgICBwcml2YXRlIHN0cmluZyBwb3N0RGF0YSB7DQogICAgICAgIGdldCB7DQogICAgICAgICAgICByZXR1cm4gc3RyaW5nLkZvcm1hdCgie3sgICBcImRvbWFpblwiOiBcInswfVwiLCAgIFwicmVnaXN0ZXJfc2VydmVyXCI6IFwiezF9XCIsICAgXCJ0cmFuc3BvcnRfcHJvdG9jb2xcIjogXCJ7Mn1cIiwgICBcInByb3h5X3NlcnZlclwiOiBcInszfVwiLCAgIFwicmVnaXN0ZXJfc2VydmVyMlwiOiBcIns0fVwiLCAgIFwidHJhbnNwb3J0X3Byb3RvY29sMlwiOiBcIns1fVwiLCAgIFwicHJveHlfc2VydmVyMlwiOiBcIns2fVwiLCAgIFwicmVnaXN0ZXJfc2VydmVyM1wiOiBcIns3fVwiLCAgIFwidHJhbnNwb3J0X3Byb3RvY29sM1wiOiBcIns4fVwiLCAgIFwicHJveHlfc2VydmVyM1wiOiBcIns5fVwiLCAgIFwicmVnaXN0cmF0aW9uX2V4cGlyZV90aW1lXCI6IFwiezEwfVwiLCAgIFwidXNlcl9uYW1lXCI6IFwiezExfVwiLCAgIFwicGFzc3dvcmRcIjogXCJ7MTJ9XCIsICAgXCJhdXRob3JpemF0aW9uX25hbWVcIjogXCJ7MTN9XCIsICAgXCJ2b2ljZV9tYWlsXCI6IFwiezE0fVwiIH19Iixkb21haW4scmVnaXN0ZXJfc2VydmVyLHRyYW5zcG9ydF9wcm90b2NvbCxwcm94eV9zZXJ2ZXIscmVnaXN0ZXJfc2VydmVyMix0cmFuc3BvcnRfcHJvdG9jb2wyLHByb3h5X3NlcnZlcjIscmVnaXN0ZXJfc2VydmVyMyx0cmFuc3BvcnRfcHJvdG9jb2wzLHByb3h5X3NlcnZlcjMscmVnaXN0cmF0aW9uX2V4cGlyZV90aW1lLHVzZXJfbmFtZSxwYXNzd29yZCxhdXRob3JpemF0aW9uX25hbWUsdm9pY2VfbWFpbCk7DQogICAgICAgIH0NCiAgICB9DQogICAgDQogICAgcHJpdmF0ZSBTeXN0ZW0uQ29sbGVjdGlvbnMuR2VuZXJpYy5EaWN0aW9uYXJ5PHN0cmluZywgc3RyaW5nPiBoZWFkZXJzIHsNCiAgICAgICAgZ2V0IHsNCiAgICAgICAgICAgIHJldHVybiBuZXcgRGljdGlvbmFyeTxzdHJpbmcsIHN0cmluZz4oKSB7eyJhdXRob3JpemF0aW9uIiwiQmVhcmVyICIgKyBBeWVodUhlbHBlci5KV1RUb2tlbihhcGlrZXkscGFzc3dvcmQxLCJIUzI1NiIsIkpXVCIsIDEyMCl9fTsNCiAgICAgICAgfQ0KICAgIH0NCiAgICANCiAgICBwcml2YXRlIFN5c3RlbS5Db2xsZWN0aW9ucy5HZW5lcmljLkRpY3Rpb25hcnk8c3RyaW5nLCBzdHJpbmc+IHF1ZXJ5U3RyaW5nQXJyYXkgew0KICAgICAgICBnZXQgew0KICAgICAgICAgICAgcmV0dXJuIG5ldyBEaWN0aW9uYXJ5PHN0cmluZywgc3RyaW5nPigpIHt9Ow0KICAgICAgICB9DQogICAgfQ0KDQoNCiAgICAgICAgcHVibGljIGFzeW5jIFN5c3RlbS5UaHJlYWRpbmcuVGFza3MuVGFzazxJQ3VzdG9tQWN0aXZpdHlSZXN1bHQ+IEV4ZWN1dGUoKQ0KICAgICAgICB7DQoNCiAgICAgICAgICAgIEh0dHBDbGllbnQgY2xpZW50ID0gbmV3IEh0dHBDbGllbnQoKTsNCiAgICAgICAgICAgIFNlcnZpY2VQb2ludE1hbmFnZXIuRXhwZWN0MTAwQ29udGludWUgPSB0cnVlOw0KICAgICAgICAgICAgU2VydmljZVBvaW50TWFuYWdlci5TZWN1cml0eVByb3RvY29sID0gU2VjdXJpdHlQcm90b2NvbFR5cGUuVGxzMTI7DQogICAgICAgICAgICBTZXJ2aWNlUG9pbnRNYW5hZ2VyLlNlcnZlckNlcnRpZmljYXRlVmFsaWRhdGlvbkNhbGxiYWNrID0gbmV3IFN5c3RlbS5OZXQuU2VjdXJpdHkuUmVtb3RlQ2VydGlmaWNhdGVWYWxpZGF0aW9uQ2FsbGJhY2soQWNjZXB0QWxsQ2VydGlmaWNhdGlvbnMpOw0KICAgICAgICAgICAgVXJpQnVpbGRlciBVcmlCdWlsZGVyID0gbmV3IFVyaUJ1aWxkZXIoZW5kUG9pbnQpOyANCiAgICAgICAgICAgIFVyaUJ1aWxkZXIuUGF0aCA9IHVyaUJ1aWxkZXJQYXRoOw0KICAgICAgICAgICAgVXJpQnVpbGRlci5RdWVyeSA9IEF5ZWh1SGVscGVyLnF1ZXJ5U3RyaW5nQnVpbGRlcihxdWVyeVN0cmluZ0FycmF5KTsNCiAgICAgICAgICAgIEh0dHBSZXF1ZXN0TWVzc2FnZSBteUh0dHBSZXF1ZXN0TWVzc2FnZSA9IG5ldyBIdHRwUmVxdWVzdE1lc3NhZ2UobmV3IEh0dHBNZXRob2QoaHR0cE1ldGhvZCksIFVyaUJ1aWxkZXIuVG9TdHJpbmcoKSk7DQogICAgICAgICAgIA0KICAgICAgICAgICAgaWYgKGNvbnRlbnRUeXBlID09ICJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQiKQ0KICAgICAgICAgICAgICAgIG15SHR0cFJlcXVlc3RNZXNzYWdlLkNvbnRlbnQgPSBBeWVodUhlbHBlci5mb3JtVXJsRW5jb2RlZENvbnRlbnQocG9zdERhdGEpOw0KICAgICAgICAgICAgZWxzZQ0KICAgICAgICAgICAgICBpZiAoc3RyaW5nLklzTnVsbE9yRW1wdHkocG9zdERhdGEpID09IGZhbHNlKQ0KICAgICAgICAgICAgICAgIGlmIChvbWl0SnNvbkVtcHR5b3JOdWxsKQ0KICAgICAgICAgICAgICAgICAgICBteUh0dHBSZXF1ZXN0TWVzc2FnZS5Db250ZW50ID0gbmV3IFN0cmluZ0NvbnRlbnQoQXllaHVIZWxwZXIub21pdEpzb25FbXB0eW9yTnVsbChwb3N0RGF0YSksIEVuY29kaW5nLlVURjgsICJhcHBsaWNhdGlvbi9qc29uIik7DQogICAgICAgICAgICAgICAgZWxzZQ0KICAgICAgICAgICAgICAgICAgICBteUh0dHBSZXF1ZXN0TWVzc2FnZS5Db250ZW50ID0gbmV3IFN0cmluZ0NvbnRlbnQocG9zdERhdGEsIEVuY29kaW5nLlVURjgsICJhcHBsaWNhdGlvbi9qc29uIik7DQoNCg0KICAgICAgICAgICAgZm9yZWFjaCAoS2V5VmFsdWVQYWlyPHN0cmluZywgc3RyaW5nPiBoZWFkZXJpdGVtIGluIGhlYWRlcnMpDQogICAgICAgICAgICAgICAgY2xpZW50LkRlZmF1bHRSZXF1ZXN0SGVhZGVycy5BZGQoaGVhZGVyaXRlbS5LZXksIGhlYWRlcml0ZW0uVmFsdWUpOw0KDQogICAgICAgICAgICBIdHRwUmVzcG9uc2VNZXNzYWdlIHJlc3BvbnNlID0gY2xpZW50LlNlbmRBc3luYyhteUh0dHBSZXF1ZXN0TWVzc2FnZSkuUmVzdWx0Ow0KDQogICAgICAgICAgICBzd2l0Y2ggKHJlc3BvbnNlLlN0YXR1c0NvZGUpDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgY2FzZSBIdHRwU3RhdHVzQ29kZS5Ob0NvbnRlbnQ6DQogICAgICAgICAgICAgICAgY2FzZSBIdHRwU3RhdHVzQ29kZS5DcmVhdGVkOg0KICAgICAgICAgICAgICAgIGNhc2UgSHR0cFN0YXR1c0NvZGUuQWNjZXB0ZWQ6DQogICAgICAgICAgICAgICAgY2FzZSBIdHRwU3RhdHVzQ29kZS5PSzoNCiAgICAgICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHN0cmluZy5Jc051bGxPckVtcHR5KHJlc3BvbnNlLkNvbnRlbnQuUmVhZEFzU3RyaW5nQXN5bmMoKS5SZXN1bHQpID09IGZhbHNlKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLkdlbmVyYXRlQWN0aXZpdHlSZXN1bHQocmVzcG9uc2UuQ29udGVudC5SZWFkQXNTdHJpbmdBc3luYygpLlJlc3VsdCwgSnNvbmtleXBhdGgpOw0KICAgICAgICAgICAgICAgICAgICAgICAgZWxzZQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLkdlbmVyYXRlQWN0aXZpdHlSZXN1bHQoIlN1Y2Nlc3MiKTsNCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIGRlZmF1bHQ6DQogICAgICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzdHJpbmcuSXNOdWxsT3JFbXB0eShyZXNwb25zZS5Db250ZW50LlJlYWRBc1N0cmluZ0FzeW5jKCkuUmVzdWx0KSA9PSBmYWxzZSkNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXhjZXB0aW9uKHJlc3BvbnNlLkNvbnRlbnQuUmVhZEFzU3RyaW5nQXN5bmMoKS5SZXN1bHQpOw0KICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoc3RyaW5nLklzTnVsbE9yRW1wdHkocmVzcG9uc2UuUmVhc29uUGhyYXNlKSA9PSBmYWxzZSkNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXhjZXB0aW9uKHJlc3BvbnNlLlJlYXNvblBocmFzZSk7DQogICAgICAgICAgICAgICAgICAgICAgICBlbHNlDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEV4Y2VwdGlvbihyZXNwb25zZS5TdGF0dXNDb2RlLlRvU3RyaW5nKCkpOw0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9DQogICAgICAgIH0NCg0KICAgICAgICBwdWJsaWMgYm9vbCBBY2NlcHRBbGxDZXJ0aWZpY2F0aW9ucyhvYmplY3Qgc2VuZGVyLCBTeXN0ZW0uU2VjdXJpdHkuQ3J5cHRvZ3JhcGh5Llg1MDlDZXJ0aWZpY2F0ZXMuWDUwOUNlcnRpZmljYXRlIGNlcnRpZmljYXRpb24sIFN5c3RlbS5TZWN1cml0eS5DcnlwdG9ncmFwaHkuWDUwOUNlcnRpZmljYXRlcy5YNTA5Q2hhaW4gY2hhaW4sIFN5c3RlbS5OZXQuU2VjdXJpdHkuU3NsUG9saWN5RXJyb3JzIHNzbFBvbGljeUVycm9ycykNCiAgICAgICAgew0KICAgICAgICAgICAgcmV0dXJuIHRydWU7DQogICAgICAgIH0NCiAgICB9DQp9&lt;/SourceCode&gt;
&lt;/Activity&gt;</SourceCode>
  </ActivitySourceMetadata>
</ActivityExportMetadata>