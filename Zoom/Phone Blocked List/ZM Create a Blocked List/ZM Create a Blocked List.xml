<?xml version="1.0" encoding="utf-16"?>
<ActivityExportMetadata>
  <ActivityMetadata>
    <Name>ZM Create a Blocked List</Name>
    <Label>ZM Create a Blocked List</Label>
    <Color>#EF712F</Color>
    <Description>A Zoom account owner or a user with admin privilege can block phone numbers for phone users in an account. Blocked numbers can be inbound (numbers will be blocked from calling in) and outbound (phone users in your account won't be able to dial those numbers). Blocked callers will hear a generic message stating that the person they are calling is not available.Use this API to create a blocked list and add a number to that blocked list.
**Prerequisites:**
* Pro or higher account plan with Zoom phone license
**Scope:** `phone:write:admin` 



</Description>
    <HelpHtml>&lt;p&gt;&lt;br&gt;#     Zoom&lt;/br&gt;
&lt;br&gt;Create a Blocked List&lt;/br&gt;
&lt;br&gt;A Zoom account owner or a user with admin privilege can block phone numbers for phone users in an account. Blocked numbers can be inbound (numbers will be blocked from calling in) and outbound (phone users in your account won&#39;t be able to dial those numbers). Blocked callers will hear a generic message stating that the person they are calling is not available.Use this API to create a blocked list and add a number to that blocked list.
**Prerequisites:**
* Pro or higher account plan with Zoom phone license
**Scope:** `phone:write:admin` 



&lt;/br&gt;
&lt;br&gt;Method: Post&lt;/br&gt;
&lt;br&gt;OperationID: addAnumberToBlockedList&lt;/br&gt;
&lt;br&gt;EndPoint:&lt;/br&gt;
&lt;br&gt;/phone/blocked_list&lt;/br&gt;
 &lt;/p&gt;</HelpHtml>
  </ActivityMetadata>
  <ActivityGroupMetadata>
    <Label>Zoom</Label>
    <LabelKey>ZOOM</LabelKey>
    <Icon>fa-wrench</Icon>
    <Color>#EF712F</Color>
    <Description>custom</Description>
  </ActivityGroupMetadata>
  <ActivitySourceMetadata>
    <SourceCode>&lt;Activity&gt;
  &lt;Name&gt;ZM Create a Blocked List&lt;/Name&gt;
  &lt;Version&gt;1.0.0.88&lt;/Version&gt;
  &lt;Platform&gt;Windows&lt;/Platform&gt;
  &lt;SourceType&gt;Executor&lt;/SourceType&gt;
  &lt;SourceCodeType&gt;CSHARP&lt;/SourceCodeType&gt;
  &lt;Enc&gt;False&lt;/Enc&gt;
  &lt;Remark /&gt;
  &lt;RequiresMap&gt;False&lt;/RequiresMap&gt;
  &lt;GlobalMemoryRequests /&gt;
  &lt;Assemblies&gt;
    &lt;Assembly type="0"&gt;System.XML.dll&lt;/Assembly&gt;
&lt;Assembly type="0"&gt;System.Data.dll&lt;/Assembly&gt;
&lt;Assembly type="0"&gt;System.dll&lt;/Assembly&gt;
&lt;Assembly type="0"&gt;System.Web.dll&lt;/Assembly&gt;
&lt;Assembly type="0"&gt;System.Net.Http.dll&lt;/Assembly&gt;

  &lt;/Assemblies&gt;
  &lt;SourceCode&gt;dXNpbmcgU3lzdGVtOw0KdXNpbmcgQXllaHUuU2RrLkFjdGl2aXR5Q3JlYXRpb24uSW50ZXJmYWNlczsNCnVzaW5nIEF5ZWh1LlNkay5BY3Rpdml0eUNyZWF0aW9uLkV4dGVuc2lvbjsNCnVzaW5nIEF5ZWh1LlNkay5BY3Rpdml0eUNyZWF0aW9uLkhlbHBlcnM7DQp1c2luZyBTeXN0ZW0uTmV0Ow0KdXNpbmcgU3lzdGVtLk5ldC5IdHRwOw0KdXNpbmcgU3lzdGVtLlRleHQ7DQp1c2luZyBTeXN0ZW0uQ29sbGVjdGlvbnMuR2VuZXJpYzsNCg0KbmFtZXNwYWNlIEF5ZWh1Llpvb20NCnsNCiAgICBwdWJsaWMgY2xhc3MgWk1fQ3JlYXRlX2FfQmxvY2tlZF9MaXN0IDogSUFjdGl2aXR5QXN5bmMNCiAgICB7DQoNCg0KICAgIA0KICAgIHB1YmxpYyBzdHJpbmcgSnNvbmtleXBhdGggPSAiYmxvY2tlZF9saXN0IjsNCiAgICANCiAgICBwdWJsaWMgc3RyaW5nIGFwaWtleSA9ICIiOw0KICAgIA0KICAgIHB1YmxpYyBzdHJpbmcgcGFzc3dvcmQxID0gIiI7DQogICAgDQogICAgcHVibGljIHN0cmluZyBtYXRjaF90eXBlID0gIiI7DQogICAgDQogICAgcHVibGljIHN0cmluZyBwaG9uZV9udW1iZXIgPSAiIjsNCiAgICANCiAgICBwdWJsaWMgc3RyaW5nIGJsb2NrX3R5cGUgPSAiIjsNCiAgICANCiAgICBwdWJsaWMgc3RyaW5nIHN0YXR1cyA9ICIiOw0KICAgIA0KICAgIHB1YmxpYyBzdHJpbmcgY29tbWVudCA9ICIiOw0KICAgIA0KICAgIHByaXZhdGUgYm9vbCBvbWl0SnNvbkVtcHR5b3JOdWxsID0gdHJ1ZTsNCiAgICANCiAgICBwcml2YXRlIHN0cmluZyBjb250ZW50VHlwZSA9ICJhcHBsaWNhdGlvbi9qc29uIjsNCiAgICANCiAgICBwcml2YXRlIHN0cmluZyBlbmRQb2ludCA9ICJodHRwczovL2FwaS56b29tLnVzIjsNCiAgICANCiAgICBwcml2YXRlIHN0cmluZyBodHRwTWV0aG9kID0gIlBPU1QiOw0KICAgIA0KICAgIHByaXZhdGUgc3RyaW5nIF91cmlCdWlsZGVyUGF0aDsNCiAgICANCiAgICBwcml2YXRlIHN0cmluZyBfcG9zdERhdGE7DQogICAgDQogICAgcHJpdmF0ZSBTeXN0ZW0uQ29sbGVjdGlvbnMuR2VuZXJpYy5EaWN0aW9uYXJ5PHN0cmluZywgc3RyaW5nPiBfaGVhZGVyczsNCiAgICANCiAgICBwcml2YXRlIFN5c3RlbS5Db2xsZWN0aW9ucy5HZW5lcmljLkRpY3Rpb25hcnk8c3RyaW5nLCBzdHJpbmc+IF9xdWVyeVN0cmluZ0FycmF5Ow0KICAgIA0KICAgIHByaXZhdGUgc3RyaW5nIHVyaUJ1aWxkZXJQYXRoIHsNCiAgICAgICAgZ2V0IHsNCiAgICAgICAgICAgIGlmIChzdHJpbmcuSXNOdWxsT3JFbXB0eShfdXJpQnVpbGRlclBhdGgpKSB7DQpfdXJpQnVpbGRlclBhdGggPSAidjIvcGhvbmUvYmxvY2tlZF9saXN0IjsNCiAgICAgICAgICAgIH0NCnJldHVybiBfdXJpQnVpbGRlclBhdGg7DQogICAgICAgIH0NCiAgICAgICAgc2V0IHsNCiAgICAgICAgICAgIHRoaXMuX3VyaUJ1aWxkZXJQYXRoID0gdmFsdWU7DQogICAgICAgIH0NCiAgICB9DQogICAgDQogICAgcHJpdmF0ZSBzdHJpbmcgcG9zdERhdGEgew0KICAgICAgICBnZXQgew0KICAgICAgICAgICAgaWYgKHN0cmluZy5Jc051bGxPckVtcHR5KF9wb3N0RGF0YSkpIHsNCl9wb3N0RGF0YSA9IHN0cmluZy5Gb3JtYXQoInt7IFwibWF0Y2hfdHlwZVwiOiBcInswfVwiLCAgXCJwaG9uZV9udW1iZXJcIjogXCJ7MX1cIiwgIFwiYmxvY2tfdHlwZVwiOiBcInsyfVwiLCAgXCJzdGF0dXNcIjogXCJ7M31cIiwgIFwiY29tbWVudFwiOiBcIns0fVwiIH19IixtYXRjaF90eXBlLHBob25lX251bWJlcixibG9ja190eXBlLHN0YXR1cyxjb21tZW50KTsNCiAgICAgICAgICAgIH0NCnJldHVybiBfcG9zdERhdGE7DQogICAgICAgIH0NCiAgICAgICAgc2V0IHsNCiAgICAgICAgICAgIHRoaXMuX3Bvc3REYXRhID0gdmFsdWU7DQogICAgICAgIH0NCiAgICB9DQogICAgDQogICAgcHJpdmF0ZSBTeXN0ZW0uQ29sbGVjdGlvbnMuR2VuZXJpYy5EaWN0aW9uYXJ5PHN0cmluZywgc3RyaW5nPiBoZWFkZXJzIHsNCiAgICAgICAgZ2V0IHsNCiAgICAgICAgICAgIGlmIChfaGVhZGVycyA9PSBudWxsKSB7DQpfaGVhZGVycyA9IG5ldyBEaWN0aW9uYXJ5PHN0cmluZywgc3RyaW5nPigpIHsgeyJhdXRob3JpemF0aW9uIiwiQmVhcmVyICIgKyBBeWVodUhlbHBlci5KV1RUb2tlbihhcGlrZXkscGFzc3dvcmQxLCJIUzI1NiIsIkpXVCIsIDEyMCl9IH07DQogICAgICAgICAgICB9DQpyZXR1cm4gX2hlYWRlcnM7DQogICAgICAgIH0NCiAgICAgICAgc2V0IHsNCiAgICAgICAgICAgIHRoaXMuX2hlYWRlcnMgPSB2YWx1ZTsNCiAgICAgICAgfQ0KICAgIH0NCiAgICANCiAgICBwcml2YXRlIFN5c3RlbS5Db2xsZWN0aW9ucy5HZW5lcmljLkRpY3Rpb25hcnk8c3RyaW5nLCBzdHJpbmc+IHF1ZXJ5U3RyaW5nQXJyYXkgew0KICAgICAgICBnZXQgew0KICAgICAgICAgICAgaWYgKF9xdWVyeVN0cmluZ0FycmF5ID09IG51bGwpIHsNCl9xdWVyeVN0cmluZ0FycmF5ID0gbmV3IERpY3Rpb25hcnk8c3RyaW5nLCBzdHJpbmc+KCkgeyAgfTsNCiAgICAgICAgICAgIH0NCnJldHVybiBfcXVlcnlTdHJpbmdBcnJheTsNCiAgICAgICAgfQ0KICAgICAgICBzZXQgew0KICAgICAgICAgICAgdGhpcy5fcXVlcnlTdHJpbmdBcnJheSA9IHZhbHVlOw0KICAgICAgICB9DQogICAgfQ0KICAgIA0KICAgIHB1YmxpYyBaTV9DcmVhdGVfYV9CbG9ja2VkX0xpc3QoKSB7DQogICAgfQ0KICAgIA0KICAgIHB1YmxpYyBaTV9DcmVhdGVfYV9CbG9ja2VkX0xpc3Qoc3RyaW5nIEpzb25rZXlwYXRoLCBzdHJpbmcgYXBpa2V5LCBzdHJpbmcgcGFzc3dvcmQxLCBzdHJpbmcgbWF0Y2hfdHlwZSwgc3RyaW5nIHBob25lX251bWJlciwgc3RyaW5nIGJsb2NrX3R5cGUsIHN0cmluZyBzdGF0dXMsIHN0cmluZyBjb21tZW50KSB7DQogICAgICAgIHRoaXMuSnNvbmtleXBhdGggPSBKc29ua2V5cGF0aDsNCiAgICAgICAgdGhpcy5hcGlrZXkgPSBhcGlrZXk7DQogICAgICAgIHRoaXMucGFzc3dvcmQxID0gcGFzc3dvcmQxOw0KICAgICAgICB0aGlzLm1hdGNoX3R5cGUgPSBtYXRjaF90eXBlOw0KICAgICAgICB0aGlzLnBob25lX251bWJlciA9IHBob25lX251bWJlcjsNCiAgICAgICAgdGhpcy5ibG9ja190eXBlID0gYmxvY2tfdHlwZTsNCiAgICAgICAgdGhpcy5zdGF0dXMgPSBzdGF0dXM7DQogICAgICAgIHRoaXMuY29tbWVudCA9IGNvbW1lbnQ7DQogICAgfQ0KDQoNCiAgICAgICAgcHVibGljIGFzeW5jIFN5c3RlbS5UaHJlYWRpbmcuVGFza3MuVGFzazxJQ3VzdG9tQWN0aXZpdHlSZXN1bHQ+IEV4ZWN1dGUoKQ0KICAgICAgICB7DQoNCiAgICAgICAgICAgIEh0dHBDbGllbnQgY2xpZW50ID0gbmV3IEh0dHBDbGllbnQoKTsNCiAgICAgICAgICAgIFNlcnZpY2VQb2ludE1hbmFnZXIuRXhwZWN0MTAwQ29udGludWUgPSB0cnVlOw0KICAgICAgICAgICAgU2VydmljZVBvaW50TWFuYWdlci5TZWN1cml0eVByb3RvY29sID0gU2VjdXJpdHlQcm90b2NvbFR5cGUuVGxzMTI7DQogICAgICAgICAgICBTZXJ2aWNlUG9pbnRNYW5hZ2VyLlNlcnZlckNlcnRpZmljYXRlVmFsaWRhdGlvbkNhbGxiYWNrID0gbmV3IFN5c3RlbS5OZXQuU2VjdXJpdHkuUmVtb3RlQ2VydGlmaWNhdGVWYWxpZGF0aW9uQ2FsbGJhY2soQWNjZXB0QWxsQ2VydGlmaWNhdGlvbnMpOw0KICAgICAgICAgICAgVXJpQnVpbGRlciBVcmlCdWlsZGVyID0gbmV3IFVyaUJ1aWxkZXIoZW5kUG9pbnQpOyANCiAgICAgICAgICAgIFVyaUJ1aWxkZXIuUGF0aCA9IHVyaUJ1aWxkZXJQYXRoOw0KICAgICAgICAgICAgVXJpQnVpbGRlci5RdWVyeSA9IEF5ZWh1SGVscGVyLnF1ZXJ5U3RyaW5nQnVpbGRlcihxdWVyeVN0cmluZ0FycmF5KTsNCiAgICAgICAgICAgIEh0dHBSZXF1ZXN0TWVzc2FnZSBteUh0dHBSZXF1ZXN0TWVzc2FnZSA9IG5ldyBIdHRwUmVxdWVzdE1lc3NhZ2UobmV3IEh0dHBNZXRob2QoaHR0cE1ldGhvZCksIFVyaUJ1aWxkZXIuVG9TdHJpbmcoKSk7DQogICAgICAgICAgIA0KICAgICAgICAgICAgaWYgKGNvbnRlbnRUeXBlID09ICJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQiKQ0KICAgICAgICAgICAgICAgIG15SHR0cFJlcXVlc3RNZXNzYWdlLkNvbnRlbnQgPSBBeWVodUhlbHBlci5mb3JtVXJsRW5jb2RlZENvbnRlbnQocG9zdERhdGEpOw0KICAgICAgICAgICAgZWxzZQ0KICAgICAgICAgICAgICBpZiAoc3RyaW5nLklzTnVsbE9yRW1wdHkocG9zdERhdGEpID09IGZhbHNlKQ0KICAgICAgICAgICAgICAgIGlmIChvbWl0SnNvbkVtcHR5b3JOdWxsKQ0KICAgICAgICAgICAgICAgICAgICBteUh0dHBSZXF1ZXN0TWVzc2FnZS5Db250ZW50ID0gbmV3IFN0cmluZ0NvbnRlbnQoQXllaHVIZWxwZXIub21pdEpzb25FbXB0eW9yTnVsbChwb3N0RGF0YSksIEVuY29kaW5nLlVURjgsICJhcHBsaWNhdGlvbi9qc29uIik7DQogICAgICAgICAgICAgICAgZWxzZQ0KICAgICAgICAgICAgICAgICAgICBteUh0dHBSZXF1ZXN0TWVzc2FnZS5Db250ZW50ID0gbmV3IFN0cmluZ0NvbnRlbnQocG9zdERhdGEsIEVuY29kaW5nLlVURjgsIGNvbnRlbnRUeXBlKTsNCg0KDQogICAgICAgICAgICBmb3JlYWNoIChLZXlWYWx1ZVBhaXI8c3RyaW5nLCBzdHJpbmc+IGhlYWRlcml0ZW0gaW4gaGVhZGVycykNCiAgICAgICAgICAgICAgICBjbGllbnQuRGVmYXVsdFJlcXVlc3RIZWFkZXJzLkFkZChoZWFkZXJpdGVtLktleSwgaGVhZGVyaXRlbS5WYWx1ZSk7DQoNCiAgICAgICAgICAgIEh0dHBSZXNwb25zZU1lc3NhZ2UgcmVzcG9uc2UgPSBjbGllbnQuU2VuZEFzeW5jKG15SHR0cFJlcXVlc3RNZXNzYWdlKS5SZXN1bHQ7DQoNCiAgICAgICAgICAgIHN3aXRjaCAocmVzcG9uc2UuU3RhdHVzQ29kZSkNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICBjYXNlIEh0dHBTdGF0dXNDb2RlLk5vQ29udGVudDoNCiAgICAgICAgICAgICAgICBjYXNlIEh0dHBTdGF0dXNDb2RlLkNyZWF0ZWQ6DQogICAgICAgICAgICAgICAgY2FzZSBIdHRwU3RhdHVzQ29kZS5BY2NlcHRlZDoNCiAgICAgICAgICAgICAgICBjYXNlIEh0dHBTdGF0dXNDb2RlLk9LOg0KICAgICAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgICAgICBpZiAoc3RyaW5nLklzTnVsbE9yRW1wdHkocmVzcG9uc2UuQ29udGVudC5SZWFkQXNTdHJpbmdBc3luYygpLlJlc3VsdCkgPT0gZmFsc2UpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuR2VuZXJhdGVBY3Rpdml0eVJlc3VsdChyZXNwb25zZS5Db250ZW50LlJlYWRBc1N0cmluZ0FzeW5jKCkuUmVzdWx0LCBKc29ua2V5cGF0aCk7DQogICAgICAgICAgICAgICAgICAgICAgICBlbHNlDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuR2VuZXJhdGVBY3Rpdml0eVJlc3VsdCgiU3VjY2VzcyIpOw0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgZGVmYXVsdDoNCiAgICAgICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHN0cmluZy5Jc051bGxPckVtcHR5KHJlc3BvbnNlLkNvbnRlbnQuUmVhZEFzU3RyaW5nQXN5bmMoKS5SZXN1bHQpID09IGZhbHNlKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFeGNlcHRpb24ocmVzcG9uc2UuQ29udGVudC5SZWFkQXNTdHJpbmdBc3luYygpLlJlc3VsdCk7DQogICAgICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChzdHJpbmcuSXNOdWxsT3JFbXB0eShyZXNwb25zZS5SZWFzb25QaHJhc2UpID09IGZhbHNlKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFeGNlcHRpb24ocmVzcG9uc2UuUmVhc29uUGhyYXNlKTsNCiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXhjZXB0aW9uKHJlc3BvbnNlLlN0YXR1c0NvZGUuVG9TdHJpbmcoKSk7DQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KDQogICAgICAgIHB1YmxpYyBib29sIEFjY2VwdEFsbENlcnRpZmljYXRpb25zKG9iamVjdCBzZW5kZXIsIFN5c3RlbS5TZWN1cml0eS5DcnlwdG9ncmFwaHkuWDUwOUNlcnRpZmljYXRlcy5YNTA5Q2VydGlmaWNhdGUgY2VydGlmaWNhdGlvbiwgU3lzdGVtLlNlY3VyaXR5LkNyeXB0b2dyYXBoeS5YNTA5Q2VydGlmaWNhdGVzLlg1MDlDaGFpbiBjaGFpbiwgU3lzdGVtLk5ldC5TZWN1cml0eS5Tc2xQb2xpY3lFcnJvcnMgc3NsUG9saWN5RXJyb3JzKQ0KICAgICAgICB7DQogICAgICAgICAgICByZXR1cm4gdHJ1ZTsNCiAgICAgICAgfQ0KICAgIH0NCn0=&lt;/SourceCode&gt;
&lt;/Activity&gt;</SourceCode>
  </ActivitySourceMetadata>
</ActivityExportMetadata>